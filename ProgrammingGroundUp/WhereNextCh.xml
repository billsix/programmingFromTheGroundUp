<chapter>
<title>Moving On from Here</title>
<!--

Copyright 2002 Jonathan Bartlett

Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
Version 1.1 or any later version published by the Free Software
Foundation; with no Invariant Sections, with no Front-Cover Texts,
and with no Back-Cover Texts.  A copy of the license is included in fdl.xml

-->

<para>
Congratulations on getting this far.  You should now have a basis for 
understanding the issues involved in many areas of programming.  Even
if you never use assembly language again, you have gained a valuable
perspective and mental framework for understanding the rest of computer
science. 
</para>

<para>
As you learn more, continue trying to build it upon the foundation you
have already laid.  When you learn new languages and APIs, remember that
they all eventually go down to the assembly language level.  It's nothing
that you couldn't do yourself if you had the time.  Everything is within
a reaching distance.
</para>

<para>
That said, you still have much to learn which is not covered by this book.  
This chapter describes what you need to learn, and where to find that 
information.  In fact, programming is only one part of what programmers
do.  Programmers generally need to be knowledgeable in the following areas:

<itemizedlist>
<listitem><para>Logical Data Organization</para></listitem>
<listitem><para>Physical Data Organization</para></listitem>
<listitem><para>Program Architecture</para></listitem>
<listitem><para>Project Management</para></listitem>
<listitem><para>System Administration and Networking</para></listitem>
<listitem><para>Security</para></listitem>
</itemizedlist>
</para>

<sect1>
<title>Logical Data Organization</title>

<para>
Programs operate on data.  They are used to process data, produce new data,
and be used for data entry.  Therefore, knowing about data organization
is extremely important.  Logical data organization is mostly learning how
to define the relationships between data.  Note that logical organization
is simply how data are related to each other logically, not how it is actually
stored within a computer.  Learning about relational
databases is probably the best way to gain skill in this area.<footnote>
<para>Please note that learning SQL is not all there is to know about 
databases and logical data organization.</para></footnote>  Books that
will help you in this area are:

<itemizedlist>
<listitem><para></para></listitem>
</itemizedlist>

</para>

</sect1>

<sect1>
<title>Physical Data Organization</title>

<para>
Physical data organization consists of methods of storing data on a computer
for retrieval and update.  This field is mostly referred to as data structures.
This book only really talks about two data structures - the array and
the linked list.  However, there are many other data structures available
to you as a programmer.  Having a background in assembly language will
help you understand data structure design much better.
</para>

<para>
The following books are great ones for learning about data structures:

<itemizedlist>
<listitem><para><citetitle>The Art of Computer Programming</citetitle> by Donald Knuth (3 volume set - volume 1 is the most important)</para></listitem>
<listitem><para><citetitle>Data Structures in C++ using the Standard Template Library</citetitle> by <remark>FIXME - Who is this by?</remark> </para></listitem>
</itemizedlist>
</para>

</sect1>

<sect1>
<title>Program Architecture</title>

<para>
Program architecture, or how to design and write programs effectively,
is not tought in this book.  This book teaches the concepts of how 
programming works, but not how to go about designing and writing a
large-scale program.   The best books on this subject are:

<itemizedlist>
<listitem><para><citetitle>Structure and Interpretation of Computer Programs</citetitle> by <remark>FIXME - who is this by?</remark></para></listitem>
</itemizedlist>

In addition to these books, one of the best ways to learn good program
design techniques is to read well-architected programs.  The Free Software
and Open Source communities contain a number of programs which can show
you great programming practices on both large and small scales.
</para>

</sect1>

<sect1>
<title>Project Management</title>

<para>
A lot of programming is project management - learning to gather requirements,
calculate return on investment, estimate schedules, talk to people about
requirements, status reports, etc.  Contrary to popular thought, successful
programmers almost always have excellent communication skills, especially
with nontechnical people.  Being able to communicate technical problems 
and options to nontechnical people is an essential skill.  Being able to
listen to nontechnical people and translating their needs into technical
requirements is also an essential skill.  Programming without effective
communication is a hobby, not a profession.  Being able to run a project
successfully can often be more important than the technical skills, especially
when outsourcing is an option.
</para>

<para>
Books on project management include:

<itemizedlist>
<listitem><para><citetitle>The Mythical Man-Month</citetitle> by <remark>FIXME - who is this by?</remark></para></listitem>
</itemizedlist>

</para>

</sect1>

<sect1>
<title>System Administration and Networking</title>

<para>
In small companies, the programmer and the system administrator are often
the same person.  However, even when the tasks are separate, the programmer
needs to have some understanding of system administration concepts.  Otherwise
you are likely to create headaches for the system administrator who has to
install and administer your program on a daily basis.  System administration
varies quite a bit from organization to organization, but there are still
books you can read to get a good grasp on the subject, including:

<itemizedlist>
<listitem><para><remark>FIXME - what books go here?</remark></para></listitem>
</itemizedlist>

</para>

</sect1>

<sect1>
<title>Security</title>

<para>
Security is a fundamental concept to computer programmers, especially when 
writing web applications, server software, or any software that could be
used as a component of such systems.  In fact, because most software 
interacts with the network and outside systems in some way, all programmers
should have a thorough understanding of the principles involved in developing
secure applications.
</para>

<para>
Books with 
</para>

</sect1>

</chapter>
