# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2006-05-15 16:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING"

# type: Content of: <chapter><title>
#: ../../CCh.xml:2
#, no-wrap
msgid "The C Language"
msgstr ""

# type: Content of: <chapter><para>
#: ../../CCh.xml:16
msgid ""
"In this chapter we will begin to look at our first \"real-world\" "
"programming language.  Assembly language is the language used at the "
"machine's level, but most people (including me) find coding in assembly "
"language too cumbersome for normal use.  Many computer languages have been "
"invented to make the programming task easier.  Knowing a wide variety of "
"languages is useful for many reasons, including"
msgstr ""

# type: Content of: <chapter><para><itemizedlist><listitem><para>
#: ../../CCh.xml:25
msgid "Different languages are good for different types of projects"
msgstr ""

# type: Content of: <chapter><para><itemizedlist><listitem><para>
#: ../../CCh.xml:26
msgid ""
"Different companies have different standard languages, so knowing more "
"languages makes your skills more marketable"
msgstr ""

# type: Content of: <chapter><para><itemizedlist><listitem><para>
#: ../../CCh.xml:27
msgid "The more languages you know, the easier it is to pick up new ones"
msgstr ""

# type: Content of: <chapter><para><itemizedlist><listitem><para>
#: ../../CCh.xml:28
msgid ""
"Different languages are based on different concepts, which will help you to "
"learn different and better ways of doing things"
msgstr ""

# type: Content of: <chapter><para>
#: ../../CCh.xml:31
msgid "This chapter focuses on the C language."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../CCh.xml:35
#, no-wrap
msgid "Compiled and Interpretted Languages"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:38
msgid ""
"C is a <emphasis>compiled</emphasis> language.  When you wrote in assembly "
"language, each instruction you wrote was translated into exactly one machine "
"instruction for processing.  With compilers, an instruction can translate "
"into one or hundreds of machine instructions.  In fact, depending on how "
"advanced your compiler is, it might even restructure parts of your code to "
"make it faster.  In assembly language, what you write is what you get."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:48
msgid ""
"There are also languages that are <emphasis>translated</emphasis> "
"languages.  These languages require that the user run a program called a "
"<emphasis>translator</emphasis> (also called a <emphasis>run-time "
"environment</emphasis>) that in turn runs the given program.  These are "
"usually slower than compiled programs, since the translator has to read and "
"interpret the code as it goes along.  However, in well-made translators, "
"this time can be fairly negligible.  There is also a class of hybrid "
"languages which partially compile a program before execution into "
"byte-codes, which are only machine readable.  The translator can read the "
"byte-codes much faster than it can read the regular language, so the reading "
"step only happens once."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:63
msgid ""
"There are many reasons to choose one or the other.  Compiled programs are "
"nice, because you don't have to already have a translator installed in the "
"user's machine.  You have to have a compiler for the language, but the users "
"of your program don't.  In a translated language, you have to be sure that "
"the user has a translator for your program, and that the computer knows "
"which translator runs your program."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../CCh.xml:74
#, no-wrap
msgid "Your First C Program"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:77
msgid ""
"As you may have noticed, I enjoy presenting you with a program first, and "
"then explaining how it works.  So, here is your first program, which prints "
"\"Hello world\" to the screen and exits.  Type it in, and give it the name "
"Hello-World.c"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:86
msgid ""
"As you can see, it's a pretty simple program.  To compile it, run the "
"command"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:93
msgid "To run the program, do"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:99
msgid "Let's look at how this program was put together."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:103
msgid ""
"Comments in C are started with <literal>/*</literal> and ended with "
"<literal>*/</literal>.  Comments can span multiple lines, but many people "
"prefer to start and end comments on the same line so they don't get "
"confused."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:110
msgid ""
"<literal>#include &lt;stdio.h&gt;</literal> is the first part of the "
"program.  This is a <emphasis>preprocessor directive</emphasis>.  C "
"compiling is split into two stages - the preprocessor and the main "
"compiler.  This directive tells the preprocessor to look for the file "
"<filename>stdio.h</filename> and paste it into your program.  So, everything "
"in <filename>stdio.h</filename> is now in your program just as if you typed "
"it there yourself.  The angle brackets around the filename tell the compiler "
"to look in its standard paths for the file "
"(<filename>/usr/include</filename> and "
"<filename>/usr/local/include</filename>, usually).  If it was in quotes, "
"like <literal>#include \"stdio.h\"</literal> it would look in the current "
"directory for the file.  Anyway, <filename>stdio.h</filename> contains the "
"declarations for the standard input and output functions and variables.  The "
"next few lines are simply comments about the program."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:128
msgid ""
"Then there is the line <literal>int main(int argc, char **argv)</literal>.  "
"This is the start of a function.  C Functions are declared with their name, "
"arguments and return type.  This declaration says taht the functions name is "
"<literal>main</literal>, it returns an <literal>int</literal> (integer), and "
"has two arguments - an <literal>int</literal> called <literal>argc</literal> "
"and a <literal>char **</literal> called <literal>argv</literal>.  You don't "
"have to worry about where the arguments are positioned on the stack - the C "
"compiler takes care of that for you.  You also don't have to worry about "
"loading values into and out of registers.  The <literal>main</literal> "
"function is a special function - it is the start or all C programs.  It "
"always takes two parameters.  The first parameter is the number of arguments "
"given to this command, and the second parameter is a list of the arguments "
"that were given."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../CCh.xml:144
msgid ""
"The next line is a function call.  In assembly language, you had to push the "
"arguments of a function onto the stack, and then call the function.  C takes "
"care of this complexity for you.  You simply have to call the function with "
"the parameters in parenthesis.  In this case, we call the function "
"<literal>puts</literal>, with a single parameter.  This parameter is the"
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../CCh.xml:199
#, no-wrap
msgid "Review"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../CCh.xml:202
#, no-wrap
msgid "Know the Concepts"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../CCh.xml:211
#, no-wrap
msgid "Use the Concepts"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../CCh.xml:220
#, no-wrap
msgid "Going Further"
msgstr ""
