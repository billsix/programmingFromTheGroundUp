# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2006-05-15 16:01+0800\n"
"PO-Revision-Date: 2006-07-30 01:29+0800\n"
"Last-Translator: Zhang Le <robert.zhangle@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING\n"
"X-Generator: Pootle 0.10beta3\n"

# type: Content of: <chapter><title>
#: ../../MemoryCh.xml:2
#, no-wrap
msgid "Computer Architecture"
msgstr "计算机架构"

# type: Content of: <chapter><para>
#: ../../MemoryCh.xml:5
msgid ""
"Before learning how to program, you need to first understand how a computer "
"interprets programs.  You don't need a degree in electrical engineering, but "
"you need to understand some basics."
msgstr ""

# type: Content of: <chapter><para>
#: ../../MemoryCh.xml:11
msgid "Modern computer architecture<indexterm>"
msgstr ""

# type: Content of: <chapter><para><primary>
#: ../../MemoryCh.xml:11
#, no-wrap
msgid "computer architecture"
msgstr ""

# type: Content of: <chapter><para>
#: ../../MemoryCh.xml:11
msgid ""
"</indexterm> is based off of an architecture called the Von Neumann "
"architecture<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:12 ../../MemoryCh.xml:68
#, no-wrap
msgid "Von Neumann architecture"
msgstr ""

# type: Content of: <chapter><para>
#: ../../MemoryCh.xml:12
msgid ""
"</indexterm>, named after its creator.  The Von Neumann architecture divides "
"the computer up into two main parts - the CPU<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:14 ../../MemoryCh.xml:84
#, no-wrap
msgid "CPU"
msgstr ""

# type: Content of: <chapter><para>
#: ../../MemoryCh.xml:14
msgid ""
"</indexterm> (for Central Processing Unit) and the memory.  This "
"architecture is used in all modern computers, including personal computers, "
"supercomputers, mainframes, and even cell phones."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../MemoryCh.xml:19
#, no-wrap
msgid "Structure of Computer Memory"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:22
msgid "To understand how the computer views memory<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:22 ../../MemoryCh.xml:51
#, no-wrap
msgid "memory"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:22
msgid ""
"</indexterm>, imagine your local post office.  They usually have a room "
"filled with PO Boxes.  These boxes are similar to computer memory in that "
"each are numbered sequences of fixed-size storage locations.  For example, "
"if you have 256 megabytes of computer memory, that means that your computer "
"contains roughly 256 million fixed-size storage locations.  Or, to use our "
"analogy, 256 million PO Boxes.  Each location has a number, and each "
"location has the same, fixed-length size.  The difference between a PO Box "
"and computer memory is that you can store all different kinds of things in a "
"PO Box, but you can only store a single number in a computer memory storage "
"location."
msgstr ""

# type: Content of: <chapter><sect1><mediaobject><caption><para>
#: ../../MemoryCh.xml:39
msgid "<emphasis>Memory locations are like PO Boxes</emphasis>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:43
msgid ""
"You may wonder why a computer is organized this way.  It is because it is "
"simple to implement.  If the computer were composed of a lot of "
"differently-sized locations, or if you could store different kinds of data "
"in them, it would be difficult and expensive to implement."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:51
msgid "The computer's memory<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:51
msgid ""
"</indexterm> is used for a number of different things.  All of the results "
"of any calculations are stored in memory.  In fact, everything that is "
"\"stored\" is stored in memory.  Think of your computer at home, and imagine "
"what all is stored in your computer's memory."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:58
msgid "The location of your cursor on the screen"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:59
msgid "The size of each window on the screen"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:60
msgid "The shape of each letter of each font being used"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:61
msgid "The layout of all of the controls on each window"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:62
msgid "The graphics for all of the toolbar icons"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:63
msgid "The text for each error message and dialog box"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:64
msgid "The list goes on and on..."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:68
msgid "In addition to all of this, the Von Neumann architecture<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:68
msgid ""
"</indexterm> specifies that not only computer data should live in memory, "
"but the programs that control the computer's operation should live there, "
"too.  In fact, in a computer, there is no difference between a program and a "
"program's data except how it is used by the computer.  They are both stored "
"and accessed the same way."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../MemoryCh.xml:79
#, no-wrap
msgid "The CPU"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:82
msgid ""
"So how does the computer function? Obviously, simply storing data doesn't do "
"much help - you need to be able to access, manipulate, and move it.  That's "
"where the CPU<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:84
msgid "</indexterm> comes in."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:88
msgid ""
"The CPU reads in instructions from memory one at a time and executes them.  "
"This is known as the <emphasis>fetch-execute cycle</emphasis><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:89
#, no-wrap
msgid "fetch-execute cycle"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:89
msgid "</indexterm>.  The CPU contains the following elements to accomplish this:"
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:93
msgid "Program Counter<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para><primary>
#: ../../MemoryCh.xml:93
#, no-wrap
msgid "program counter"
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:93 ../../MemoryCh.xml:94 ../../MemoryCh.xml:95 ../../MemoryCh.xml:96 ../../MemoryCh.xml:97
msgid "</indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:94
msgid "Instruction Decoder<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:94 ../../MemoryCh.xml:107
#, no-wrap
msgid "instruction decoder"
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:95
msgid "Data bus<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:95 ../../MemoryCh.xml:116 ../../MemoryCh.xml:143
#, no-wrap
msgid "data bus"
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:96
msgid "General-purpose registers<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:96 ../../MemoryCh.xml:128
#, no-wrap
msgid "general-purpose registers"
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:97
msgid "Arithmetic and logic unit<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:97 ../../MemoryCh.xml:140
#, no-wrap
msgid "arithmetic and logic unit"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:100
msgid ""
"The <emphasis>program counter</emphasis> is used to tell the computer where "
"to fetch the next instruction from.  We mentioned earlier that there is no "
"difference between the way data and programs are stored, they are just "
"interpreted differently by the CPU.  The program counter holds the memory "
"address of the next instruction to be executed.  The CPU begins by looking "
"at the program counter, and fetching whatever number is stored in memory at "
"the location specified.  It is then passed on to the <emphasis>instruction "
"decoder</emphasis><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:107
msgid ""
"</indexterm> which figures out what the instruction means.  This includes "
"what process needs to take place (addition, subtraction, multiplication, "
"data movement, etc.) and what memory locations are going to be involved in "
"this process.  Computer instructions usually consist of both the actual "
"instruction and the list of memory locations that are used to carry it out."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:116
msgid "Now the computer uses the <emphasis>data bus</emphasis><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:116
msgid ""
"</indexterm> to fetch the memory locations to be used in the calculation.  "
"The data bus is the connection between the CPU and memory.  It is the actual "
"wire that connects them.  If you look at the motherboard of the computer, "
"the wires that go out from the memory are your data bus."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:124
msgid ""
"In addition to the memory on the outside of the processor, the processor "
"itself has some special, high-speed memory locations called "
"registers<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:125 ../../MemoryCh.xml:216
#, no-wrap
msgid "registers"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:125
msgid ""
"</indexterm>.  There are two kinds of registers - <emphasis>general "
"registers</emphasis> and <emphasis>special-purpose registers</emphasis>.  "
"General-purpose registers<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:128
msgid ""
"</indexterm> are where the main action happens.  Addition, subtraction, "
"multiplication, comparisions, and other operations generally use "
"general-purpose registers for processing.  However, computers have very few "
"general-purpose registers.  Most information is stored in main memory, "
"brought in to the registers for processing, and then put back into memory "
"when the processing is completed.  <emphasis>special-purpose "
"registers<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:134
#, no-wrap
msgid "special-purpose registers"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:134
msgid ""
"</indexterm></emphasis> are registers which have very specific purposes.  We "
"will discuss these as we come to them."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:139
msgid ""
"Now that the CPU has retrieved all of the data it needs, it passes on the "
"data and the decoded instruction to the <emphasis>arithmetic and logic "
"unit<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:140
msgid ""
"</indexterm></emphasis> for further processing.  Here the instruction is "
"actually executed.  After the results of the computation have been "
"calculated, the results are then placed on the data bus<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:143
msgid ""
"</indexterm> and sent to the appropriate location in memory or in a "
"register, as specified by the instruction."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:148
msgid ""
"This is a very simplified explanation.  Processors have advanced quite a bit "
"in recent years, and are now much more complex.  Although the basic "
"operation is still the same, it is complicated by the use of cache "
"hierarchies<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:151
#, no-wrap
msgid "cache hierarchies"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:151
msgid "</indexterm>, superscalar processors<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:152
#, no-wrap
msgid ""
"superscalar\n"
"processors"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:153
msgid "</indexterm>, pipelining<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:153
#, no-wrap
msgid "pipelining"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:153
msgid "</indexterm>, branch prediction<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:153
#, no-wrap
msgid "branch prediction"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:153
msgid "</indexterm>, out-of-order execution<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:153
#, no-wrap
msgid "out-of-order execution"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:153
msgid "</indexterm>, microcode translation<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:154
#, no-wrap
msgid "microcode translation"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:154
msgid "</indexterm>, coprocessors<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:154
#, no-wrap
msgid "coprocessors"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:154
msgid ""
"</indexterm>, and other optimizations.  Don't worry if you don't know what "
"those words mean, you can just use them as Internet search terms if you want "
"to learn more about the CPU."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../MemoryCh.xml:161
#, no-wrap
msgid "Some Terms"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:164
msgid "Computer memory<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:164
#, no-wrap
msgid "computer memory"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:164
msgid ""
"</indexterm> is a numbered sequence of fixed-size storage locations.  The "
"number attached to each storage location is called its "
"<emphasis>address<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:166
#, no-wrap
msgid "address"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:166
msgid ""
"</indexterm></emphasis>.  The size of a single storage location is called a "
"<emphasis>byte</emphasis>.  On x86 processors, a byte<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:167
#, no-wrap
msgid "bytes"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:167
msgid "</indexterm> is a number between 0 and 255."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:172
msgid ""
"You may be wondering how computers can display and use text, graphics, and "
"even large numbers when all they can do is store numbers between 0 and 255.  "
"First of all, specialized hardware like graphics cards have special "
"interpretations of each number.  When displaying to the screen, the computer "
"uses ASCII<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:176 ../../MemoryCh.xml:197
#, no-wrap
msgid "ASCII"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:176
msgid ""
"</indexterm> code tables to translate the numbers you are sending it into "
"letters to display on the screen, with each number translating to exactly "
"one letter or numeral.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../MemoryCh.xml:178
msgid ""
"With the advent of international character sets and Unicode, this is not "
"entirely true anymore.  However, for the purposes of keeping this simple for "
"beginners, we will use the assumption that one number translates directly to "
"one character.  For more information, see <xref linkend=\"asciilisting\" />."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:182
msgid ""
"</footnote> For example, the capital letter A is represented by the number "
"65.  The numeral 1 is represented by the number 49.  So, to print out "
"\"HELLO\", you would actually give the computer the sequence of numbers 72, "
"69, 76, 76, 79.  To print out the number 100, you would give the computer "
"the sequence of numbers 49, 48, 48.  A list of ASCII characters and their "
"numeric codes is found in <xref linkend=\"asciilisting\" />."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:193
msgid ""
"In addition to using numbers to represent ASCII characters, you as the "
"programmer get to make the numbers mean anything you want them to, as well.  "
"For example, if I am running a store, I would use a number to represent each "
"item I was selling.  Each number would be linked to a series of other "
"numbers which would be the ASCII<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:197
msgid ""
"</indexterm> codes for what I wanted to display when the items were scanned "
"in.  I would have more numbers for the price, how many I have in inventory, "
"and so on."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:203
msgid ""
"So what about if we need numbers larger than 255? We can simply use a "
"combination of bytes to represent larger numbers.  Two bytes can be used to "
"represent any number between 0 and 65535.  Four bytes can be used to "
"represent any number between 0 and 4294967295.  Now, it is quite difficult "
"to write programs to stick bytes together to increase the size of your "
"numbers, and requires a bit of math.  Luckily, the computer will do it for "
"us for numbers up to 4 bytes long.  In fact, four-byte numbers are what we "
"will work with by default."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:214
msgid ""
"We mentioned earlier that in addition to the regular memory that the "
"computer has, it also has special-purpose storage locations called "
"<emphasis>registers<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:216
msgid ""
"</indexterm></emphasis>.  Registers are what the computer uses for "
"computation.  Think of a register as a place on your desk - it holds things "
"you are currently working on.  You may have lots of information tucked away "
"in folders and drawers, but the stuff you are working on right now is on the "
"desk.  Registers keep the contents of numbers that you are currently "
"manipulating."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:225
msgid ""
"On the computers we are using, registers are each four bytes long.  The size "
"of a typical register is called a computer's <emphasis>word<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:227
#, no-wrap
msgid "word"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:227
msgid ""
"</indexterm></emphasis> size.  x86 processors have four-byte words.  This "
"means that it is most natural on these computers to do computations four "
"bytes at a time.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../MemoryCh.xml:230
msgid ""
"Previous incarnations of x86 processors only had two-byte words.  Therefore, "
"most other literature dealing with x86 processors refers to two-byte "
"entities as words for historical reasons, and therefore refer to four-byte "
"entities as double-words.  We are using the term <emphasis>word</emphasis> "
"to mean the normal register size of a computer, which in this case is four "
"bytes.  More information is available in <xref "
"linkend=\"instructionsappendix\" />,"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:236
msgid "</footnote> This gives us roughly 4 billion values."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:242
msgid ""
"Addresses are also four bytes (1 word) long, and therefore also fit into a "
"register.  x86 processors can access up to 4294967296 bytes if enough memory "
"is installed.  Notice that this means that we can store addresses the same "
"way we store any other number.  In fact, the computer can't tell the "
"difference between a value that is an address, a value that is a number, a "
"value that is an ASCII code, or a value that you have decided to use for "
"another purpose.  A number becomes an ASCII code when you attempt to display "
"it.  A number becomes an address when you try to look up the byte it points "
"to.  Take a moment to think about this, because it is crucial to "
"understanding how computer programs work."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:255
msgid ""
"Addresses which are stored in memory are also called "
"<emphasis>pointers<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:256 ../../MemoryCh.xml:319
#, no-wrap
msgid "pointers"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:256
msgid ""
"</indexterm></emphasis>, because instead of having a regular value in them, "
"they point you to a different location in memory."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:260
msgid ""
"As we've mentioned, computer instructions are also stored in memory.  In "
"fact, they are stored exactly the same way that other data is stored.  The "
"only way the computer knows that a memory location is an instruction is that "
"a special-purpose register<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:263
#, no-wrap
msgid "special-purpose register"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:263
msgid "</indexterm> called the instruction pointer<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:263
#, no-wrap
msgid "instruction pointer"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:263
msgid ""
"</indexterm> points to them at one point or another.  If the instruction "
"pointer points to a memory word, it is loaded as an instruction.  Other than "
"that, the computer has no way of knowing the difference between programs and "
"other types of data.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../MemoryCh.xml:266
msgid ""
"Note that here we are talking about general computer theory.  Some "
"processors and operating systems actually mark the regions of memory that "
"can be executed with a special marker that indicates this."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:269
msgid "</footnote>"
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../MemoryCh.xml:275
#, no-wrap
msgid "Interpreting Memory"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:278
msgid ""
"Computers are very exact.  Because they are exact, programmers have to be "
"equally exact.  A computer has no idea what your program is supposed to do.  "
"Therefore, it will only do exactly what you tell it to do.  If you "
"accidentally print out a regular number instead of the ASCII codes that make "
"up the number's digits, the computer will let you - and you will wind up "
"with jibberish on your screen (it will try to look up what your number "
"represents in ASCII and print that).  If you tell the computer to start "
"executing instructions at a location containing data instead of program "
"instructions, who knows how the computer will interpret that - but it will "
"certainly try.  The computer will execute your instructions in the exact "
"order you specify, even if it doesn't make sense."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:289
msgid ""
"The point is, the computer will do exactly what you tell it, no matter how "
"little sense it makes.  Therefore, as a programmer, you need to know exactly "
"how you have your data arranged in memory.  Remember, computers can only "
"store numbers, so letters, pictures, music, web pages, documents, and "
"anything else are just long sequences of numbers in the computer, which "
"particular programs know how to interpret."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:298
msgid ""
"For example, say that you wanted to store customer information in memory.  "
"One way to do so would be to set a maximum size for the customer's name and "
"address - say 50 ASCII characters for each, which would be 50 bytes for "
"each.  Then, after that, have a number for the customer's age and their "
"customer id.  In this case, you would have a block of memory that would look "
"like this:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:313
msgid ""
"This way, given the address of a customer record, you know where the rest of "
"the data lies.  However, it does limit the customer's name and address to "
"only 50 ASCII characters each."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:318
msgid ""
"What if we didn't want to specify a limit? Another way to do this would be "
"to have in our record pointers<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:319
msgid ""
"</indexterm> to this information.  For example, instead of the customer's "
"name, we would have a pointer to their name.  In this case, the memory would "
"look like this:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:333
msgid ""
"The actual name and address would be stored elsewhere in memory.  This way, "
"it is easy to tell where each part of the data is from the start of the "
"record, without explicitly limitting the size of the name and address.  If "
"the length of the fields within our records could change, we would have no "
"idea where the next field started.  Because records would be different "
"sizes, it would also be hard to find where the next record began.  "
"Therefore, almost all records are of fixed lengths.  Variable-length data is "
"usually stored separately from the rest of the record."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../MemoryCh.xml:347
#, no-wrap
msgid "Data Accessing Methods"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:352
msgid ""
"Processors have a number of different ways of accessing data, known as "
"addressing modes<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:353
#, no-wrap
msgid "addressing modes"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:353
msgid "</indexterm>.  The simplest mode is <emphasis>immediate mode<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:354
#, no-wrap
msgid "immediate mode addressing"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:354
msgid ""
"</indexterm></emphasis>, in which the data to access is embedded in the "
"instruction itself.  For example, if we want to initialize a register to 0, "
"instead of giving the computer an address to read the 0 from, we would "
"specify immediate mode, and give it the number 0."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:361
msgid "In the <emphasis>register addressing mode</emphasis><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:361
#, no-wrap
msgid "register addressing mode"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:361
msgid ""
"</indexterm>, the instruction contains a register to access, rather than a "
"memory location.  The rest of the modes will deal with addresses."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:367
msgid "In the <emphasis>direct addressing mode<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:367
#, no-wrap
msgid "direct addressing mode"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:367
msgid ""
"</indexterm></emphasis>, the instruction contains the memory address to "
"access.  For example, I could say, please load this register with the data "
"at address 2002.  The computer would go directly to byte number 2002 and "
"copy the contents into our register."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:374
msgid "In the <emphasis>indexed addressing mode<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:374
#, no-wrap
msgid "indexed addressing mode"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:374
msgid ""
"</indexterm></emphasis>, the instruction contains a memory address to "
"access, and also specifies an <emphasis>index register<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:375
#, no-wrap
msgid "index register"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:375
msgid ""
"</indexterm></emphasis> to offset that address.  For example, we could "
"specify address 2002 and an index register.  If the index register contains "
"the number 4, the actual address the data is loaded from would be 2006.  "
"This way, if you have a set of numbers starting at location 2002, you can "
"cycle between each of them using an index register.  On x86 processors, you "
"can also specify a <emphasis>multiplier<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:380
#, no-wrap
msgid "multiplier"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:380
msgid ""
"</indexterm></emphasis> for the index.  This allows you to access memory a "
"byte at a time or a word at a time (4 bytes).  If you are accessing an "
"entire word, your index will need to be multiplied by 4 to get the exact "
"location of the fourth element from your address.  For example, if you "
"wanted to access the fourth byte from location 2002, you would load your "
"index register with 3 (remember, we start counting at 0) and set the "
"multiplier to 1 since you are going a byte at a time.  This would get you "
"location 2005.  However, if you wanted to access the fourth word from "
"location 2002, you would load your index register with 3 and set the "
"multiplier to 4.  This would load from location 2014 - the fourth word.  "
"Take the time to calculate these yourself to make sure you understand how it "
"works."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:394
msgid "In the <emphasis>indirect addressing mode<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:394
#, no-wrap
msgid "indirect addressing mode"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:394
msgid ""
"</indexterm></emphasis>, the instruction contains a register that contains a "
"pointer to where the data should be accessed.  For example, if we used "
"indirect addressing mode and specified the &eax; register, and the &eax; "
"register contained the value 4, whatever value was at memory location 4 "
"would be used.  In direct addressing, we would just load the value 4, but in "
"indirect addressing, we use 4 as the address to use to find the data we "
"want."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:404
msgid "Finally, there is the <emphasis>base pointer addressing mode<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:404
#, no-wrap
msgid "base pointer addressing mode"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:404
msgid ""
"</indexterm></emphasis>.  This is similar to indirect addressing, but you "
"also include a number called the <emphasis>offset<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../MemoryCh.xml:406
#, no-wrap
msgid "offset"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:406
msgid ""
"</indexterm></emphasis> to add to the register's value before using it for "
"lookup.  We will use this mode quite a bit in this book."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:411
msgid ""
"In <xref linkend=\"interpretingmemory\" /> we discussed having a structure "
"in memory holding customer information.  Let's say we wanted to access the "
"customer's age, which was the eighth byte of the data, and we had the "
"address of the start of the structure in a register.  We could use base "
"pointer addressing and specify the register as the base pointer, and 8 as "
"our offset.  This is a lot like indexed addressing, with the difference that "
"the offset is constant and the pointer is held in a register, and in indexed "
"addressing the offset is in a register and the pointer is constant."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../MemoryCh.xml:422
msgid "There are other forms of addressing, but these are the most important ones."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../MemoryCh.xml:429
#, no-wrap
msgid "Review"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../MemoryCh.xml:432
#, no-wrap
msgid "Know the Concepts"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:435
msgid "Describe the fetch-execute cycle."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:436
msgid ""
"What is a register? How would computation be more difficult without "
"registers?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:437
msgid "How do you represent numbers larger than 255?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:438
msgid "How big are the registers on the machines we will be using?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:439
msgid ""
"How does a computer know how to interpret a given byte or set of bytes of "
"memory?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:440
msgid "What are the addressing modes and what are they used for?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:441
msgid "What does the instruction pointer do?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../MemoryCh.xml:448
#, no-wrap
msgid "Use the Concepts"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:451
msgid ""
"What data would you use in an employee record? How would you lay it out in "
"memory?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:452
msgid ""
"If I had the pointer to the beginning of the employee record above, and "
"wanted to access a particular piece of data inside of it, what addressing "
"mode would I use?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:453
msgid ""
"In base pointer addressing mode, if you have a register holding the value "
"3122, and an offset of 20, what address would you be trying to access?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:454
msgid ""
"In indexed addressing mode, if the base address is 6512, the index register "
"has a 5, and the multiplier is 4, what address would you be trying to "
"access?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:455
msgid ""
"In indexed addressing mode, if the base address is 123472, the index "
"register has a 0, and the multiplier is 4, what address would you be trying "
"to access?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:456
msgid ""
"In indexed addressing mode, if the base address is 9123478, the index "
"register has a 20, and the multiplier is 1, what address would you be trying "
"to access?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../MemoryCh.xml:463
#, no-wrap
msgid "Going Further"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:466
msgid "What are the minimum number of addressing modes needed for computation?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:467
msgid "Why include addressing modes that aren't strictly needed?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:468
msgid ""
"Research and then describe how pipelining (or one of the other complicating "
"factors) affects the fetch-execute cycle."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../MemoryCh.xml:469
msgid ""
"Research and then describe the tradeoffs between fixed-length instructions "
"and variable-length instructions."
msgstr ""
