# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2006-05-15 16:01+0800\n"
"PO-Revision-Date: 2006-07-30 17:57+0800\n"
"Last-Translator: Zhang Le <robert.zhangle@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING\n"
"X-Generator: Pootle 0.10beta3\n"

# type: Content of: <chapter><title>
#: ../../RobustCh.xml:2
#, no-wrap
msgid "Developing Robust Programs"
msgstr "开发健壮的程序"

# type: Content of: <chapter><para>
#: ../../RobustCh.xml:17
msgid ""
"This chapter deals with developing programs that are "
"<emphasis>robust<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:18 ../../RobustCh.xml:47 ../../RobustCh.xml:75 ../../RobustCh.xml:121
#, no-wrap
msgid "robust"
msgstr ""

# type: Content of: <chapter><para>
#: ../../RobustCh.xml:18
msgid ""
"</indexterm></emphasis>.  Robust programs are able to handle error "
"conditions<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../RobustCh.xml:19 ../../RobustCh.xml:69
#, no-wrap
msgid "error conditions"
msgstr ""

# type: Content of: <chapter><para>
#: ../../RobustCh.xml:19
msgid ""
"</indexterm> gracefully.  They are programs that do not crash no matter what "
"the user does.  Building robust programs is essential to the practice of "
"programming.  Writing robust programs takes discipline and work - it usually "
"entails finding every possible problem that can occur, and coming up with an "
"action plan for your program to take."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../RobustCh.xml:28
#, no-wrap
msgid "Where Does the Time Go?"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:31
msgid ""
"Programmers schedule poorly.  In almost every programming project, "
"programmers will take two, four, or even eight times as long to develop a "
"program or function than they originally estimated.  There are many reasons "
"for this problem, including:"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../RobustCh.xml:38
msgid ""
"Programmers don't always schedule time for meetings or other non-coding "
"activities that make up every day."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../RobustCh.xml:39
msgid ""
"Programmers often underestimate feedback times (how long it takes to pass "
"change requests and approvals back and forth) for projects."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../RobustCh.xml:40
msgid ""
"Programmers don't always understand the full scope of what they are "
"producing."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../RobustCh.xml:41
msgid ""
"Programmers often have to estimate a schedule on a totally different kind of "
"project than they are used to, and thus are unable to schedule accurately."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../RobustCh.xml:42
msgid ""
"Programmers often underestimate the amount of time it takes to get a program "
"fully robust."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:46
msgid ""
"The last item is the one we are interested in here.  <emphasis>It takes a "
"lot of time and effort to develop robust<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:47
msgid ""
"</indexterm> programs.</emphasis> More so than people usually guess, "
"including experienced programmers.  Programmers get so focused on simply "
"solving the problem at hand that they fail to look at the possible side "
"issues."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:54
msgid ""
"In the <literal>toupper</literal> program, we do not have any course of "
"action if the file the user selects does not exist.  The program will go "
"ahead and try to work anyway.  It doesn't report any error message so the "
"user won't even know that they typed in the name wrong.  Let's say that the "
"destination file is on a network drive, and the network temporarily fails.  "
"The operating system is returning a status code<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../RobustCh.xml:60
#, no-wrap
msgid "status code"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:60
msgid ""
"</indexterm> to us in &eax-indexed;, but we aren't checking it.  Therefore, "
"if a failure occurs, the user is totally unaware.  This program is "
"definitely not robust.  As you can see, even in a simple program there are a "
"lot of things that can go wrong that a programmer must contend with."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:68
msgid ""
"In a large program, it gets much more problematic.  There are usually many "
"more possible error conditions<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:69
msgid ""
"</indexterm> than possible successful conditions.  Therefore, you should "
"always expect to spend the majority of your time checking status codes, "
"writing error handlers, and performing similar tasks to make your program "
"robust.  If it takes two weeks to develop a program, it will likely take at "
"least two more to make it robust<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:75
msgid ""
"</indexterm>.  Remember that every error message that pops up on your screen "
"had to be programmed in by someone."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../RobustCh.xml:83
#, no-wrap
msgid "Some Tips for Developing Robust Programs"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../RobustCh.xml:86
#, no-wrap
msgid "User Testing"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:89
msgid "Testing<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:89 ../../RobustCh.xml:120
#, no-wrap
msgid "testing"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:89
msgid ""
"</indexterm> is one of the most essential things a programmer does.  If you "
"haven't tested something, you should assume it doesn't work.  However, "
"testing isn't just about making sure your program works, it's about making "
"sure your program doesn't break.  For example, if I have a program that is "
"only supposed to deal with positive numbers, you need to test what happens "
"if the user enters a negative number.  Or a letter.  Or the number zero.  "
"You must test what happens if they put spaces before their numbers, spaces "
"after their numbers, and other little possibilities.  You need to make sure "
"that you handle the user's data in a way that makes sense to the user, and "
"that you pass on that data in a way that makes sense to the rest of your "
"program.  When your program finds input that doesn't make sense, it needs to "
"perform appropriate actions.  Depending on your program, this may include "
"ending the program, prompting the user to re-enter values, notifying a "
"central error log, rolling back an operation, or ignoring it and continuing."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:106
msgid ""
"Not only should you test your programs, you need to have others test it as "
"well.  You should enlist other programmers and users of your program to help "
"you test your program.  If something is a problem for your users, even if it "
"seems okay to you, it needs to be fixed.  If the user doesn't know how to "
"use your program correctly, that should be treated as a bug that needs to be "
"fixed."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:115
msgid ""
"You will find that users find a lot more bugs in your program than you ever "
"could.  The reason is that users don't know what the computer expects.  You "
"know what kinds of data the computer expects, and therefore are much more "
"likely to enter data that makes sense to the computer.  Users enter data "
"that makes sense to them.  Allowing non-programmers to use your program for "
"testing<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:120
msgid ""
"</indexterm> purposes usually gives you much more accurate results as to how "
"robust<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:121
msgid "</indexterm> your program truly is."
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../RobustCh.xml:128
#, no-wrap
msgid "Data Testing"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:131
msgid ""
"When designing programs, each of your functions needs to be very specific "
"about the type and range of data that it will or won't accept.  You then "
"need to test these functions to make sure that they perform to specification "
"when handed the appropriate data.  Most important is testing "
"<emphasis>corner cases<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:135
#, no-wrap
msgid "corner cases"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:135
msgid "</indexterm></emphasis> or <emphasis>edge cases<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:136
#, no-wrap
msgid "edge cases"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:136
msgid ""
"</indexterm></emphasis>.  Corner cases are the inputs that are most likely "
"to cause problems or behave unexpectedly."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:141
msgid ""
"When testing numeric data, there are several corner cases you always need to "
"test:"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:146
msgid "The number 0"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:147
msgid "The number 1"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:148
msgid "A number within the expected range"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:149
msgid "A number outside the expected range"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:150
msgid "The first number in the expected range"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:151
msgid "The last number in the expected range"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:152
msgid "The first number below the expected range"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:153
msgid "The first number above the expected range"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:157
msgid ""
"For example, if I have a program that is supposed to accept values between 5 "
"and 200, I should test 0, 1, 4, 5, 153, 200, 201, and 255 at a minimum (153 "
"and 255 were randomly chosen inside and outside the range, respectively).  "
"The same goes for any lists of data you have.  You need to test that your "
"program behaves as expected for lists of 0 items, 1 item, massive numbers of "
"items, and so on.  In addition, you should also test any turning points you "
"have.  For example, if you have different code to handle people under and "
"over age 30, for example, you would need to test it on people of ages 29, "
"30, and 31 at least."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:169
msgid ""
"There will be some internal functions that you assume get good data because "
"you have checked for errors before this point.  However, while in "
"development you often need to check for errors anyway, as your other code "
"may have errors in it.  To verify the consistency and validity of data "
"during development, most languages have a facility to easily check "
"assumptions about data correctness.  In the C language there is the "
"<literal>assert<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:175
#, no-wrap
msgid "assert"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:175
msgid ""
"</indexterm></literal> macro.  You can simply put in your code "
"<literal>assert(a > b);</literal>, and it will give an error if it reaches "
"that code when the condition is not true.  In addition, since such a check "
"is a waste of time after your code is stable, the <literal>assert</literal> "
"macro allows you to turn off asserts at compile-time.  This makes sure that "
"your functions are receiving good data without causing unnecessary slowdowns "
"for code released to the public."
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../RobustCh.xml:189
#, no-wrap
msgid "Module Testing"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:192
msgid ""
"Not only should you test your program as a whole, you need to test the "
"individual pieces of your program.  As you develop your program, you should "
"test individual functions by providing it with data you create to make sure "
"it responds appropriately."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:199
msgid ""
"In order to do this effectively, you have to develop functions whose sole "
"purpose is to call functions for testing.  These are called "
"<emphasis>drivers<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:201
#, no-wrap
msgid "drivers"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:201
msgid ""
"</indexterm></emphasis> (not to be confused with hardware drivers) .  They "
"simply load your function, supply it with data, and check the results.  This "
"is especially useful if you are working on pieces of an unfinished program.  "
"Since you can't test all of the pieces together, you can create a driver "
"program that will test each function individually."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:210
msgid ""
"Also, the code you are testing may make calls to functions not developed "
"yet.  In order to overcome this problem, you can write a small function "
"called a <emphasis>stub<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:212
#, no-wrap
msgid "stub"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:212
msgid ""
"</indexterm></emphasis> which simply returns the values that function needs "
"to proceed.  For example, in an e-commerce application, I had a function "
"called <literal>is_ready_to_checkout</literal>.  Before I had time to "
"actually write the function I just set it to return true on every call so "
"that the functions which relied on it would have an answer.  This allowed me "
"to test functions which relied on <literal>is_ready_to_checkout</literal> "
"without the function being fully implemented."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../RobustCh.xml:228
#, no-wrap
msgid "Handling Errors Effectively"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:231
msgid ""
"Not only is it important to know how to test, but it is also important to "
"know what to do when an error is detected."
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../RobustCh.xml:236
#, no-wrap
msgid "Have an Error Code for Everything"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:239
msgid ""
"Truly robust software has a unique error code for every possible "
"contingency.  By simply knowing the error code<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:240
#, no-wrap
msgid "error code"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:240
msgid ""
"</indexterm>, you should be able to find the location in your code where "
"that error was signalled."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:245
msgid ""
"This is important because the error code is usually all the user has to go "
"on when reporting errors.  Therefore, it needs to be as useful as possible."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:250
msgid ""
"Error codes should also be accompanied by descriptive error messages.  "
"<indexterm zone=\"handlingerrors\">"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:251 ../../RobustCh.xml:289
#, no-wrap
msgid "error messages"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:251
msgid ""
"</indexterm> However, only in rare circumstances should the error message "
"try to predict <emphasis>why</emphasis> the error occurred.  It should "
"simply relate what happened.  Back in 1995 I worked for an Internet Service "
"Provider.  One of the web browsers we supported tried to guess the cause for "
"every network error, rather than just reporting the error.  If the computer "
"wasn't connected to the Internet and the user tried to connect to a website, "
"it would say that there was a problem with the Internet Service Provider, "
"that the server was down, and that the user should contact their Internet "
"Service Provider to correct the problem.  Nearly a quarter of our calls were "
"from people who had received this message, but merely needed to connect to "
"the Internet before trying to use their browser.  As you can see, trying to "
"diagnose what the problem is can lead to a lot more problems than it fixes.  "
"It is better to just report error codes and messages, and have separate "
"resources for the user to troubleshooting the application.  A "
"troubleshooting guide, not the program itself, is an appropriate place to "
"list possible reasons and courses for action for each error message."
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../RobustCh.xml:273
#, no-wrap
msgid "Recovery Points"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:276
msgid ""
"In order to simplify error handling, it is often useful to break your "
"program apart into distinct units, where each unit fails and is recovered as "
"a whole.  For example, you could break your program up so that reading the "
"configuration file was a unit.  If reading the configuration file failed at "
"any point (opening the file, reading the file, trying to decode the file, "
"etc.) then the program would simply treat it as a configuration file problem "
"and skip to the <emphasis>recovery point<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para><primary>
#: ../../RobustCh.xml:283 ../../RobustCh.xml:297 ../../RobustCh.xml:308
#, no-wrap
msgid "recovery points"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:283
msgid ""
"</indexterm></emphasis> for that problem.  This way you greatly reduce the "
"number of error-handling mechanism you need for your program, because error "
"recovery is done on a much more general level."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:289
msgid "Note that even with recovery points, your error messages<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:289
msgid ""
"</indexterm> need to be specific as to what the problem was.  Recovery "
"points are basic units for error recovery, not for error detection.  Error "
"detection still needs to be extremely exact, and the error reports need "
"exact error codes and messages."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:297
msgid "When using recovery points<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:297
msgid ""
"</indexterm>, you often need to include cleanup code to handle different "
"contingencies.  For example, in our configuration file example, the recovery "
"function would need to include code to check and see if the configuration "
"file was still open.  Depending on where the error occurred, the file may "
"have been left open.  The recovery function needs to check for this "
"condition, and any other condition that might lead to system instability, "
"and return the program to a consistent state."
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:308
msgid "The simplest way to handle recovery points<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><sect2><para>
#: ../../RobustCh.xml:308
msgid ""
"</indexterm> is to wrap the whole program into a single recovery point.  You "
"would just have a simple error-reporting function that you can call with an "
"error code and a message.  The function would print them and and simply exit "
"the program.  This is not usually the best solution for real-world "
"situations, but it is a good fall-back, last resort mechanism."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../RobustCh.xml:322
#, no-wrap
msgid "Making Our Program More Robust"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:325
msgid ""
"This section will go through making the <filename>add-year.s</filename> "
"program from <xref linkend=\"records\" /> a little more robust."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:330
msgid ""
"Since this is a pretty simple program, we will limit ourselves to a single "
"recovery point that covers the whole program.  The only thing we will do to "
"recover is to print the error and exit.  The code to do that is pretty "
"simple:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:341
msgid ""
"Enter it in a file called <filename>error-exit.s</filename>.  To call it, "
"you just need to push the address of an error message, and then an error "
"code onto the stack, and call the function."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:347
msgid ""
"Now let's look for potential error spots in our <literal>add-year</literal> "
"program.  First of all, we don't check to see if either of our "
"<literal>open</literal> system calls actually complete properly.  Linux "
"returns its status code in &eax-indexed;, so we need to check and see if "
"there is an error."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:391
msgid ""
"So, after calling the system call, we check and see if we have an error by "
"checking to see if the result of the system call is less than zero.  If so, "
"we call our error reporting and exit routine."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:397
msgid "After every system call<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../RobustCh.xml:397
#, no-wrap
msgid "system call"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:397
msgid "</indexterm>, function call<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../RobustCh.xml:398
#, no-wrap
msgid "function call"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:398
msgid "</indexterm>, or instruction<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../RobustCh.xml:399
#, no-wrap
msgid "instruction"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:399
msgid ""
"</indexterm> which can have erroneous results you should add error "
"checking<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../RobustCh.xml:401
#, no-wrap
msgid "error checking"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:401
msgid "</indexterm> and handling code."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:405
msgid "To assemble and link the files, do:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../RobustCh.xml:415
msgid ""
"Now try to run it without the necessary files.  It now exits cleanly and "
"gracefully!"
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../RobustCh.xml:422
#, no-wrap
msgid "Review"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../RobustCh.xml:425
#, no-wrap
msgid "Know the Concepts"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:428
msgid "What are the reasons programmer's have trouble with scheduling?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:429
msgid ""
"Find your favorite program, and try to use it in a completely wrong manner.  "
"Open up files of the wrong type, choose invalid options, close windows that "
"are supposed to be open, etc.  Count how many different error scenarios they "
"had to account for."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:430
msgid "What are corner cases? Can you list examples of numeric corner cases?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:431
msgid "Why is user testing so important?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:432
msgid "What are stubs and drivers used for? What's the difference between the two?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:433
msgid "What are recovery points used for?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:434
msgid "How many different error codes should a program have?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../RobustCh.xml:440
#, no-wrap
msgid "Use the Concepts"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:443
msgid ""
"Go through the <filename>add-year.s</filename> program and add "
"error-checking code after every system call."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:444
msgid ""
"Find one other program we have done so far, and add error-checking to that "
"program."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:445
msgid ""
"Add a recovery mechanism for <filename>add-year.s</filename> that allows it "
"to read from STDIN if it cannot open the standard file."
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../RobustCh.xml:451
#, no-wrap
msgid "Going Further"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:454
msgid ""
"What, if anything, should you do if your error-reporting function fails? "
"Why?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:455
msgid ""
"Try to find bugs in at least one open-source program.  File a bug report for "
"it."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../RobustCh.xml:456
msgid "Try to fix the bug you found in the previous exercise."
msgstr ""
