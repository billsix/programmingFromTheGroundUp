<?xml version="1.0" encoding="utf-8" ?>
<chapter>
<title>Introduction to Playstation 3 / CBE Programming</title>
<para>
In the previous parts of the series, we covered programming using the PowerPC 64-bit instruction set.  This instruction set is used on numerous processors, including the POWER4, POWER5, and the Cell Broadband Engine -- the chip used in the new Playstation 3.  However, the PowerPC is only one element of the Cell Broadband Engine.  The Cell actually consists of 9 elements -- a single dual-core Power Processing Element (PPE), and eight Synergistic Processing Elements (SPE), which are essentially general-purpose vector processing elements.  Vector processing elements can operate on multiple values simultaneously.   Like the PPE, the SPE can be programmed in a number of programming languages, including C and assembly language.  However, even more so than with the PPE, SPEs give the programmer a lot more control to squeeze every ounce of processing power out of it.  Therefore, while not strictly necessary, learning to program the SPE in assembly language will train your mind to program more efficiently for this processor in any language, and especially in C.  This article assumes that the reader has an understanding of PowerPC assembly language, as many concepts will be introduced in relation to their PowerPC counterparts.  This first article will not cover much of the vector aspects of the SPU, but rather it starts with the scalar (one value at a time)  aspects to make your first dive into SPU programming more familiar.
</para>

<sect1>
<title>What is an SPE?</title>
<para>
The Synergistic Processing Element (SPE), is a general-purpose vector processor with some unusual characteristics which help it to operate at high speeds with low memory consumption.  For starters, it does not have the interrupt facilities available on the PowerPC.  This means that it is incapable of performing operating-system tasks or time-sharing.  Those features have been sacrificed for the ability to go at high speeds with low power consumptions.  Even more importantly, they do not have any virtual memory features, and in fact can only reference a small 256K local store, which must hold both the program and data.  Memory is transferred between the local store and main memory using DMA.  Other differences between the the PPE and the SPE are listed below:
</para>
<table>
<title>Some Differences Between PPEs and SPEs</title> 
<tr><th></th><th>PPE</th><th>SPE</th></tr>
<tr><th># General-Purpose Registers</th><td>32 fixed-point and 32 floating-point</td><td>128 general-purpose (capable of either floating or fixed)</td></tr>
<tr><th>Register Size</th><td>64 bits</td><td>128 bits</td></tr>
<tr><th>Maximum Memory Size</th><td>Practically Unlimited</td><td>256K</td></tr>
<tr><th>Virtual Memory?</th><td>Yes</td><td>No</td></tr>
<tr><th>Interrupt Facilities?</th><td>Yes</td><td>No</td></tr>
<tr><th>Capable of Direct File I/O?</th><td>Yes</td><td>No</td></tr>
</table>
<para>
As you can see, the differences between the PPE and the SPE means that they will be used and programmed much differently.  The PPE is used for most general-purpose operating system tasks, timesharing, and maintaining system resources.  The SPEs are used for specialized numeric processing of small batches of data, which are shuffled in and out of local store from main memory using DMA operations.  Also note that the term SPE and PPE refer to the elements in their entirety - the processor, cache (if it has one), memory store, and buses.  When referring just to the processor itself, the term SPU and PPU are used instead.  
</para>
<para>
More information about the architecture of the Cell Broadband Engine is available in the resources section.
</para>

</sect1>

<sect1>
<title>A Simple Example Program</title>

<para>
To begin with, we will enter in a simple program for calculating the factorial of a 32-bit number using a recursive algorithm.  Unfortunately, it will only return the result as the exit code, so the result must be less than 256.
</para>

<para>
For reference, here is the C code which would perform the same function:
</para>

<example>
<title>C Version of Factorial Program</title>
<programlisting>
int number = 4;
int main() {
	return factorial(4);
}
int factorial(int num) {
	if(num == 0) {
		return 1;
	} else {
		return num * factorial(num - 1);
	}
}
</programlisting>
</example>

<sect2>
<title>Entering and Running the Program</title>

<para>
Enter the following as <filename>factorial.s</filename>:
</para>

<example>
<title>First SPE Program</title>
<programlisting>
###DATA SECTION###
.data

##GLOBAL VARIABLE##
#Alignment is _critical_ in SPU applications.
#This aligns to a 16-byte (128-bit) boundary
.align 4
#This is the number
number:
        .long 4

.align 4
output:
	.ascii "The factorial of %d is %d\n\0"

##STACK OFFSETS##
#Offset in the stack frame of the link register
.equ LR_OFFSET, 16
#Size of main's stack frame (back pointer + link register)
.equ MAIN_FRAME_SIZE, 32
#Size of factorial's stack frame (back pointer + link register + local variable)
.equ FACT_FRAME_SIZE, 48
#Offset in the factorial's stack frame of the local "num" variable
.equ LCL_NUM_VALUE, 32


###CODE SECTION###
.text

##MAIN ENTRY POINT
.global main
.type main,@function
main:
	##PROLOGUE##
	stqd $lr, LR_OFFSET($sp)
	stqd $sp, -MAIN_FRAME_SIZE($sp)
	ai $sp, $sp -MAIN_FRAME_SIZE

	##FUNCTION BODY##
        #Load number as the first parameter (relative addressing)
        lqr $3, number

        #Call factorial
        brsl factorial

	#Display Factorial
	#Result is in register 3 -- move it to register 5 (third parameter)
	lr $5, $3
	#Load output string into register 3 (first parameter)
	ila $3, output
	#Put original number in register 4 (second parameter)
	lqr $4, number
	#Call printf (this actually runs on the PPE)
	brsl printf

	#Load register 3 with a return value of 0
	il $3, 0

	##EPILOGUE##
	ai $sp, $sp, MAIN_FRAME_SIZE
	lqd $lr, LR_OFFSET($sp)
	bi $lr

##FACTORIAL FUNCTION
factorial:
        ##PROLOGUE##
        #Before we set up our stack frame,
        #store link register in caller's frame
        stqd $lr, LR_OFFSET($sp)
        #Store back pointer before reserving the stack space
        stqd $sp, -FACT_FRAME_SIZE($sp)
        #Move stack pointer to reserve stack space
        ai $sp, $sp, -FACT_FRAME_SIZE
        ##END PROLOGUE##

        #Save arg 1 in local variable space
        stqd $3, LCL_NUM_VALUE($sp)
        #Compare to 0, and store comparison in reg 4
        ceqi $4, $3, 0
        #Do we jump? (note that the "zero" we are comparing
        #to is the result of the above comparison)
        brnz $4, case_zero

case_not_zero:
        #remove 1, and use it as the function argument
        ai $3, $3, -1
        #call factorial function (return value in reg 3)
        brsl $lr, factorial
        #Load in the value of the current number
        lqd $5, LCL_NUM_VALUE($sp)
        #multiply the last factorial answer with the current number
        #store the answer in register 3 (the return value register)
        mpyu $3, $3, $5

	##EPILOGUE##
        #Restore previous stack frame
        ai $sp, $sp, FACT_FRAME_SIZE
        #Restore link register
        lqd $lr, LR_OFFSET($sp)
        #Return
        bi $lr

case_zero:
        #Put 1 in reg 3 for the return value
        il $3, 1
	##EPILOGUE##
        #Restore previous stack frame
        ai $sp, $sp, FACT_FRAME_SIZE
        #Return
        bi $lr
</programlisting>
</example>

<para>
To build the program, we will just use the C compiler:
</para>

<programlisting>
spu-gcc -o factorial factorial.s
</programlisting>

<para>
Now the Cell does not run SPE programs directly.  It actually requires that the main code be written for the PPE to manage resources.  However, Linux will, if given an SPE-only program, create a skeleton PPE process to manage the SPE program for you.  So you can just run the program as normal:
</para>

<programlisting>
./factorial
</programlisting>

<para>
Don't be taken back by the size of the code -- it's mostly comments and declarations.  The factorial function itself only has 16 instructions.
</para>

</sect2>

<sect2>
<title>Analyzing the Program</title>

<para>
Now let's take a look at what each instruction does, and how programming on the SPE differs from programming on the PPE which we have done in previous articles.
</para>

<para>
The program starts off with a typical data declaration which holds the value we want to compute the factorial of in a space labelled <literal>number</literal>.  However, note that before we define <literal>number</literal>, we align it using <literal>.align 4</literal>.  This aligns the next memory location to a 16-byte (2^4) boundary.  This is critical, as the SPU can only load exactly 16 bytes at a time, aligned to exactly a 16-byte boundary.  If it is given an address that is not at a 16-byte boundary, it simply zeroes out the last four bits of the address before loading to do the alignment.  Therefore, if our value is not properly aligned, it will be loaded somewhere in the register that we probably don't expect.  By aligning it to a 16-byte boundary, we know that it will load into the first four bytes of the register.  After that is another alignment statement for the beginning of the string that gives our output.  The <literal>.ascii</literal> command tells it that what follows is an ASCII string, which is explicitly terminated with a <literal>\0</literal>.
</para>

<para>
After this, we define several constants for our stack frames.  We will have two stack frame sizes.  <literal>main</literal>'s stack will be 32 bytes, while <literal>factorial</literal>'s will be 48, because <literal>factorial</literal> has a local variable to store.  These are stored in <literal>MAIN_FRAME_SIZE</literal> and <literal>FACT_FRAME_SIZE</literal>, respectively.  <literal>LR_OFFSET</literal> is the offset into the stack frame of the link register.  <literal>LCL_NUM_VALUE</literal> is the offset of the local variable <literal>num</literal>.  These will all be used to make access to stack frame offsets much clearer.
</para>

<para>
In the code section, notice that unlike for the PPE, we do not need function descriptors.  We simply declare each function name as being global and tell the assembler that it is a function.  The SPE does not need function descriptors because it is statically linked.  Therefore, global references are done simply as relative offsets rather than going through a table of contents or a global offset table.  
</para>

<para>
We will discuss prologues when we hit the <literal>factorial</literal> function. For right now, just know that it sets up the stack frame.
</para>

<para>
The first useful instruction we hit is <literal>lqr $3, number</literal>.  This stands for "load quadword relative".  The "quadword" part is a bit redundant, as only quadword loads and stores are allowed on the SPU.  This loads the value in the address <literal>number</literal> (encoded as a relative address from the current instruction) into register 3.  Notice that unlike the PPE, in SPE assembly language registers are always prefixed with a dollar sign.  This makes it much easier to spot registers in the code.  Since all registers on the SPU are 16-bytes long, this will load a full 16-byte quadword into the register, even though we are only really concerned with the first 4 bytes of it.
</para>

<para>
The value is loaded into register 3, which happens to also be the register which, like in the PPU ABI, is used to pass the first parameter of a function.  In fact, the register layout of the SPU ABI is very similar conceptually to the PPU ABI.  Here is how the registers are used:
</para>

<table>
<title>Register Usage in the SPU ABI</title>
<tr><th>Register Range</th><th>Type</th><th>Purpose</th></tr>
<tr><td>0</td><td>Dedicated</td><td>Link Register</td></tr>
<tr><td>1</td><td>Dedicated</td><td>Stack Pointer</td></tr>
<tr><td>2</td><td>Volatile</td><td>Environment Pointer (for languages that need one)</td></tr>
<tr><td>3-79</td><td>Volatile</td><td>Function arguments, return values, and general usage.</td></tr>
<tr><td>80-127</td><td>Non-volatile</td><td>Used for local variables.  Must be preserved across function calls.</td></tr>
</table>

<para>
A few things to notice.  First, the SPU has a lot more registers.  Second, the SPU doesn't use a special-purpose register for the link register.  Instead, it just uses register 0 and provides a generic indirect branch utility that can use any register  (we'll get to that later).  Volatile and non-volatile registers are used just like in the PPU ABI.  Volatile registers don't need to be saved, but should also be assumed to be overwritten on any function call.  Non-volatile registers have to be saved on the stack before use, and restored before the function returns.  We will discuss the stack shortly.
</para>

<para>
Therefore, since we want the factorial of the number 4, it goes into register 3, the register used for the first parameter.  We then branch to the function use <literal>brsl factorial</literal>.  <literal>brsl</literal> stands for "branch relative and set link".  This branches to the function entry point and sets the link register to the next instruction for the return address.
</para>

<para>
After computing the factorial, the function moves it into register 5, and then moves the address <literal>output</literal> into register 3.  <literal>ila</literal> is a special load instruction that loads static addresses, in this case loading the address of the output string into register 3.  Finally, the original number is loaded into register 4.  Finally, the <literal>printf</literal> function is called using <literal>brsl printf</literal>.  Note, however, that <literal>printf</literal> <emphasis>is not executed on the SPE</emphasis> because the SPE is incapable of input and output.  This actually goes to a stub function which stops the processor, signals the PPE, and the PPE actually performs the function call.  After that, control is returned to the SPE.  The epilogue will be discussed in the discussion of the <literal>factorial</literal> code.
</para>

<para>
Because SPEs are statically linked and have many more memory constraints than PPEs, the SPE stack frame is both simpler and typically smaller.  As you may have noticed when we defined the stack size, we are only using 48 bytes for stack space.  The layouts of stack frames on the SPU look like this:
</para>

<table>
<tr><th>Contains</th><th>Size</th><th>Beginning Stack Offset</th></tr>
<tr><td>Register Save Area</td><td>Varies (multiple of 16 bytes)</td><td>Varies</td></tr>
<tr><td>Local Variable Space</td><td>Varies (multiple of 16 bytes)</td><td>Varies</td></tr>
<tr><td>Parameter List</td><td>Varies (multiple of 16 bytes)</td><td>32($sp)</td></tr>
<tr><td>Link Register Save Area</td><td>16 bytes</td><td>16($sp)</td></tr>
<tr><td>Back Chain Pointer</td><td>16 bytes</td><td>0($sp)</td></tr>
</table>

<para>
The stack areas work just as they did on the PPE.  The back chain pointer points to the back chain pointer of the previous stack frame.  The link register save area holds the link register contents of the function being called, rather than for the current function.  The parameter list is for parameters that this function sends to other function calls, not for its own parameters.  However, unlike the PPE, no space is reserved for parameters passed through registers.  This is purely an overflow area for functions requiring more than 77 registers to hold their parameters.  The local variable space is used as a general storage area for the function, and the register save area is used to save the values of non-volatile registers that the function uses.
</para>

<para>
So, in our function, we are using the back chain pointer, the link register save area, and one local variable.  That gives us a frame size of 16 * 3 = 48 bytes.  <literal>LR_OFFSET</literal> is the offset from the top of the stack to the link register save area.  <literal>LCL_NUM_VALUE</literal> is the offset from the top of the stack to our local variable <literal>num</literal>.
</para>

<para>
In the prologue, the first thing we do is to save the link register.  Since we have not yet defined our own stack frame, the offset is from the calling function's stack frame.  Remember, the link register is stored in the calling function's stack frame, not the function's own stack frame.  Therefore, it makes most sense to save it before reserving the stack space.  This is done using a D-Form store: <literal>stqd $lr, LR_OFFSET($sp)</literal>.  Now, this looks like we are using special registers, but in fact <literal>$lr</literal> and <literal>$sp</literal> are just aliases for <literal>$0</literal> and <literal>$1</literal>, respectively.  <literal>stqd</literal> stands for "store quadword D-Form".  The SPU has the same basic addressing options as the PPU: d-form for register+constant addressing, x-form for register+register addressing, relative addressing, absolute addressing, and immediate mode.  For more information on these addressing modes, see the PPU article on the subject.(FIXME -- ref!)  So, this stores the link register (which is usually set in the function-call instruction) into the appropriate place in the stack.  Next, the current stack frame pointer is stored as the back pointer for the next stack frame, even though we haven't established the stack frame yet (this is done through negative offsets).  The SPU does not have an atomic store/update instruction like the PPU, so in order to make sure that the back pointers are always consistent, storing the back pointer must be done <emphasis>before</emphasis> the stack pointer is moved.  Finally, the stack pointer is moved to reserve all the needed stack space using the instruction <literal>ai $sp, $sp, -FRAME_SIZE</literal>.  <literal>ai</literal> stands for "add immediate", and it adds an immediate-mode value to a register and stores it back into a register.  Just like the PPU, SPU computation instructions have a destination register that can be specified.
</para>

<para>
One more note needs to be made about the "add immediate" instruction.  Remember that the SPU registers are 128 bits wide, but our value is only 32 bits long.  The reason for this is that the SPU is geared towards SIMD (single instruction multiple data) execution.  The register is treated logically as multiple values, which are operated on all-at-once.  The "add immediate" instruction actually treats the register as four separate 32-bit values, each of which are added independently and then they are all stored back into the destination register.  What this means is that, for example, a carry from one part of the add instruction will not affect the rest of the computations.  It treats them all as separate computations.  The preferred value is a 32 bit word, but others are supported, including bytes, halfwords, and doublewords.  If the size of the operand is not specified in the instruction, that means either that the size doesn't matter (as in logical instructions, for instance) or that it is using a 32-bit value size.  Bytes are indicated by including the letter <literal>b</literal> in the instruction, halfwords have an <literal>h</literal>, and doublewords have a <literal>d</literal>, though doublewords are usually only used in floating-point instructions.  Usually, however, a <literal>d</literal> in an instruction refers to the D-Form of addressing, not a doubleword.
</para>

<para>
Next, we will copy the first parameter to a local variable with <literal>stqd $3, LCL_NUM_VALUE($sp)</literal>.  We need to do this because our parameter will get clobbered on the recursive call, and we need access to it afterwards.
</para>

<para>
Next, we will do an immediate-mode compare of register 3 with the number 0 and store the result in register 4 with <literal>ceqi $4, $3, 0</literal>.  Note that with the PPU, there is a special-purpose register to hold condition results.  However, with the SPU, the results are stored in a general-purpose register -- register 4 in this case.  Remember, this is a vector processor.  So we are not actually comparing register 3 with the number 0.  Instead, we are comparing each word of register 3 with the number 0.  So we actually have four answers, even though we only care about one of them (because we only have one value loaded in).  The way that the result is stored is that if the condition for the word is true, then all of the bits on the destination word will be set.  If the condition for the word is false, then all of the bits on the destination word will be unset.  So for this instruction there will be four results.
</para>

<para>
The next instruction is <literal>brnz $4, case_zero</literal>.  <literal>brnz</literal> stands for "branch relative if not zero".  Remember, this is checking the result register for zero or not-zero.  The result register will be non-zero (i.e., true, all bits set to one) if the check for zero is true.  The previous two instructions could have been conflated into one instruction (<literal>brz $3, case_zero</literal>) since we were testing for zero, but they were separated out into two instructions so that you can better see how compares and branches work in general.
</para>

<para>
So what happens if some of the comparisons have a result of true and others false?  Since we are dealing with four 32-bit values rather than one 128-bit value, we could have different results for the different values.  So if the results are different do we branch or do we not?  It turns out that several SPU instructions deal with only one of the register's values.  In these cases, the value that is used is the one in the register's <emphasis>preferred slot</emphasis>.  For 32-bit values the preferred slot is the first word of the register; for 16-bit values the preferred slot is the second halfword of the register; and for 8-bit values the preferred slot is the fourth byte of the register.  Basically, the first word is the preferred word, and then the other alignments are on the least-significant byte or halfword of that word.  When doing conditional branching, passing values to functions, returning a value from a function, and several other scenarios, the value in the preferred slot is the one that matters.  In our case, we are to assume that the value passed in the function is in the register's preferred slot.  And, if you look at the alignment of <literal>number</literal> in the <literal>.data</literal> section, you can see that this will be loaded into the preferred slot.
</para>

<para>
Now let's assume that the number we are working with in register 3 is not zero.  This means that we need to do a recursive step.  The recursive C code is <literal>return num * factorial(num - 1)</literal>.  The innermost computation requires us decrementing <literal>num</literal> and passing it as a parameter to the next invocation of <literal>factorial</literal>.  <literal>num</literal> is already in register 3, so we just need to decrement it.  So we will do an immediate-mode add like this: <literal>ai $3, $3, -1</literal>.  Now we just need to invoke the next <literal>factorial</literal>.  To call a function according to the SPU ABI, all you need to do is put the parameters into registers, and then call <literal>brsl $lr, function_name</literal>.  In our case, the first and only parameter is already loaded into register 3.  So, we issue a <literal>brsl $lr, factorial</literal>.  <literal>brsl</literal> stands for "branch relative set link".  This means that the destination address will be a relative address, the return address will be stored in the preferred slot of the specified register, and control will go to the destination address, which in this case is back to the beginning of the <literal>factorial</literal> function.
</para>
<para>
When control comes back to this point, the factorial result should be in register 3.  Now we want to multiply this result by the current value under consideration.  Therefore, we have to load it back in because it was clobbered in the function call.  <literal>lqd</literal> stands for "load quadword D-Form".  The first operand is the destination register and the second is the D-Form address to load.  So <literal>lqd $5, LCL_NUM_VALUE($sp)</literal> will pull read the value that we saved on the stack earlier into register 5.
</para>
<para>
Now we need to multiply register 3 and register 5.  This is done with the <literal>mpyu</literal> instruction (multiply unsigned).  <literal>mpyu$3, $3, $5</literal> multiplies register 3 with register 5 and stores the result in the first register listed, register 3.  Now, the integer multiply instructions on the SPU are somewhat problematic, especially signed multiplication (using the <literal>mpy</literal> instruction).  The problem is that the result of a multiply instruction can be twice as long as its operands.  The result of multiplying two 32-bit values is actually a 64-bit value!  If it did this, then the destination register would have to be twice as large as the source register.  In order to combat the problem, multiplication instructions only use the least-significant 16 bits of every thirty-two bit value so that the result will fit in the full 32-bit register.  So, while the multiply treats the source registers as 32 bits wide, it only uses 16 bits of them.  So, your value may be truncated if it is longer than 32 bits.  And, if it is a signed multiply, the sign could even change on truncation!  Therefore, to execute multiply instructions successfully, the source values need to be 16 bits wide, but stored in a 32-bit register (it doesn't matter for the multiplication if it is sign-extended to the rest of the 32 bits or not).  This limits greatly the possible range of our factorial function.  Note that floating-point multiplication doesn't have these issues.
</para>
<para>
So now we have the result, and it is in register 3, which is where it needs to be for the return value.  All that is left to do is to restore the previous stack frame and return.  So we simply need to move the stack pointer by adding the stack frame size to the stack pointer using <literal>ai $sp, $sp, FRAME_SIZE</literal>.  We then restore the link register using <literal>lqd $lr, LR_OFFSET($sp)</literal>.  Finally, we branch to the address specified in the link register.
</para>
<para>
The base case (what to do if the function's parameter is zero) is much easier.  The result of factorial(0) is 1, so we simply load in the number one into register 3 using <literal>il $3, 1</literal>.  Then we restore the stack frame and return.  However, since the base case doesn't call any other functions, we don't need to load the link register from the stack frame - the value is still there.
</para>
<para>
And that's how the function works!  Just note that writing deeply-recursive functions on the SPE is problematic because there is no stack overflow protection on the SPE, and the local store is small to begin with. 
</para>
</sect2>
</sect1>

<sect1>
<title>Non-aligned Loads and Stores</title>

<para>
Because the SPU is focused on vector, not scalar processing, it only is able to load and store 16 bytes at a time (the size of a register) from local store locations which are aligned on 16 byte boundaries.  Therefore, you cannot just load a word from memory location 12.  In order to get that word, you would need to load a quadword from memory location 0, and then shift the bits into the preferred slot.  To load a full 128 bits (16 bytes) into a register from a non-aligned location, you would actually have to load it into two registers, shift them, and then mask and combine them.  In order to store non-aligned values, it is even more difficult.  The original quadword must be loaded, the appropriate value inserted into the right location in the quadword, and then the result stored back.  Because of these issues, it is usually advisable to store all data aligned to 16 bytes.  
</para>

<para>
The loading and storing technique, while it will allow us to use data that is not aligned to 16-byte boundaries, will require that the data be <emphasis>naturally aligned</emphasis>.  That means that words will be 4-byte aligned, halfwords will be 2-byte aligned, and bytes don't have to be aligned at all.  It's possible to do completely unaligned data loads and stores, but they require lots of extra instructions, so we're not going to cover it here.  
</para>

<para>
Doing an unaligned load requires two or three instructions, depending on the size of the data.  The reason for this is that if you are loading a single value, you probably want it in the preferred slot of the register.  The first instruction does the load, the second instruction rotates the value so that the requested address is at the beginning of the register, and then, if the data is smaller than a word, a shift is needed to move it away from the beginning into the preferred slot.  Here is the code for a byte load, which takes an address in the preferred slot of register 3 and uses it to load a byte into the preferred slot of register 4:
</para>

<example>
<title>Load from Non-Aligned Memory</title>	
<programlisting>
###Load address $3 into register $4###

#Loads from nearest quadword boundary
lqd $4, 0($3)
#Rotate value to the beginning of the register
rotqby $4, $4, $3
#Rotate value to the preferred slot (-3 for bytes, -2 for halfwords, and nothing for words or doublewords)
rotqbyi $4, $4, -3
</programlisting>
</example>

<para>
Remember, the <literal>lqd</literal> instruction only loads from 16-byte boundaries.  It will therefore ignore the 4 least significant bits during the load, and just load an aligned quadword from memory.  Therefore, for arbitrary addresses, we have no idea where in the loaded quadword the value we wanted is. The <literal>rotqby</literal> instruction, "rotate (left) quadword by bytes", uses the address you loaded from to indicate how far to rotate the register.  It only treats the least 4 significant bits of the address register to rotate. This will always be the number of bytes it needs to shift left to move the address specified to the beginning of the register.  Finally, for bytes, the preferred slot is <emphasis>not</emphasis> at the beginning of the register, but three bytes to the right.  So the instruction <literal>rotqbyi</literal> we will do a shift using an immediate-mode value to shift by.  Word- and doubleword-sized transfers do not need this last instruction, because their preferred slot is at the beginning of the register anyway.  At the end of this, register 4 has the final value, with the byte shifted into the preferred slot.  
</para>

<para>
Storing is more difficult.  Here is the code to store a byte in the preferred slot of register $4 into the address specified by register $3:
</para>

<example>
<title>Store to Non-Aligned Address</title>
<programlisting>
###Store $4 into address $3

#Load the data into a temporary register
lqd $5, 0($3)
#Generate the controls for a byte insertion
cbd $6, 0($3)
#Shuffle the data in
shufb $7, $4, $5, $6
#Store it back
stqd $7, 0($3)
</programlisting>
</example>

<para>
To understand this cryptic-looking sequence, we need to again keep in mind that the SPU only does loads and stores a quadword at a time, on quadword aligned addresses.  Therefore, if we want to store only one byte, if we tried to do it directly on an unaligned address, it would both go into the wrong location and clobber the remaining addresses in the quadword.  To avoid this, we need to first load the quadword from memory, insert the value into the appropriate byte in the quadword, and then store it back.  The hard part is inserting it into the proper location based only on the address.  Thankfully, there are two instructions to help out, <literal>cbd</literal> ("generate control for byte insertion") and <literal>shufb</literal> ("shuffle bytes").  The <literal>cbd</literal> instruction takes an address, and generates a control word that can be used by <literal>shufb</literal> to insert a byte at the proper location in the quadword for that address.  <literal>cbd $6, 0($3)</literal> uses the address in register 3 to generate the control quadword, and then stores it in register 6.  The instruction <literal>shufb $7, $4, $5, $6</literal> uses the control quadword in register 6 to generate a new value into register 7 which consists of the original quadword that was in memory (now in register 5) and a byte from register 4 in the preferred slot, and stores the result in register 7.  Once the byte is shuffled in, the value is stored back into memory.
</para>

<para>
To illustrate the technique, we're going to write a function that takes the address of an ASCII character, loads it, converts it to uppercase, and stores it back.  We are going to put the function <literal>convert_to_upper</literal> in a separate file than the <literal>main</literal> function so that we can reuse it in the remaining programs as well. Here is the code for the <literal>main</literal> function (save it as <literal>convert_main.s</literal>):
</para>

<example>
<title>Uppercase Conversion Program Start</title>
<programlisting>
.data

string_start:
.ascii "We will convert the following letter, "
letter_to_convert:
.ascii "q"
remaining:
.ascii ", to uppercase\n\0"

.text
.global main
.type main, @function

main:
	.equ MAIN_FRAME_SIZE, 32
	.equ LR_OFFSET, 16
	#PROLOGUE
	stqd $lr, LR_OFFSET($sp)
	stqd $sp, -MAIN_FRAME_SIZE($sp)
	ai $sp, $sp, -MAIN_FRAME_SIZE

	#MAIN FUNCTION
	ila $3, letter_to_convert
	brsl $lr, convert_to_upper
	ila $3, string_start
	brsl $lr, printf

	#EPILOGUE
	ai $sp, $sp, MAIN_FRAME_SIZE
	lqd $lr, LR_OFFSET($sp)
	bi $lr
</programlisting>
</example>

<para>
Now enter the function that actually does the uppercase conversion (enter as <literal>convert_to_upper.s</literal>):
</para>

<example>
<title>Function to Convert to Uppercase</title>
<programlisting>
.global convert_to_upper
.type convert_to_upper, @function
convert_to_upper:
	#Register usage
	# $3 -- parameter 1 -- address of byte to be converted
	# $4 -- byte value to be converted
	# $5 -- $4 greater than 'a' - 1?
	# $6 -- $4 greater than 'z'?
	# $7 -- $4 less than or equal to 'z'?
	# $8 -- $4 between 'a' and 'z' (inclusive)?
	# $9 through $12 -- temporary storage for final store

	#address of letter stored in unaligned address in $3
	#UNALIGNED LOAD
	lqd $4, 0($3)
	rotqby $4, $4, $3
	rotqbyi $4, $4, -3

	#IS IN RANGE 'a'-'z'?
	cgtbi $5, $4, 'a' - 1
	cgtbi $6, $4, 'z'
	nand $7, $6, $6
	and $8, $5, $7
	#Mask out irrelevant bits
	andi $8, $8, 255
	#Skip uppercase conversion and store if $4 is not lowercase (based on $8)
	brz $8, end_convert

is_lowercase:
	#Perform Conversion
	ai $4, $4, 'A' - 'a'

	#Unaligned Store
	lqd $9, 0($3)
	cbd $10, 0($3)
	shufb $11, $4, $9, $10
	stqd $11, 0($3)

end_convert:
	#no stack frame, no return value, just return
	bi $lr
</programlisting>
</example>

<para>
To compile and run, perform the following commands:
</para>

<programlisting>
spu-gcc convert_main.s convert_to_upper.s -o convert
./convert
</programlisting>

<para>
The <literal>main</literal> function doesn't function too different than from before, so we won't discuss it here.
</para>

<para>
The <literal>convert_to_upper</literal> function takes the address of an arbitrary character, converts it to upper-case, and then stores it back and returns nothing.  The first thing it does is an unaligned load as described previously into register 4.   It then checks to see if the byte is in the range <literal>a</literal> through <literal>z</literal>.  It does that by comparing if it is greater than <literal>'a' - 1</literal>, and then seeing if it is greater than <literal>'z'</literal>.  We did not do a "less than" comparison, <emphasis>because they aren't available on the SPU!</emphasis>  SPUs only have comparisons for "greater than" and "equal to".  Therefore, if we want to do a "less than or equal to" comparison, we must do a "greater than" comparison and then do a "not" on it, which is performed using the <literal>nand</literal> instruction with both source arguments being the same register.  Note that we could have combined the last two instructions with an <literal>xor</literal>, but the code would have been much less clear.  We then combine the comparisons using the <literal>and</literal> instruction.  Finally, because the branch instructions only operate on halfword or word values, we have to mask out the non-relevant portions of the register.  Finally, if the bits in the preferred slot of register 8 are not set to true, we skip to the of the function.  If they are true, we perform the conversion.  The SPU does not have the ability to add bytes, only words.  But a word-sized add still works with what we are doing, because it is both a scalar operation (so we don't have to worry about carries affecting other bytes), and because we already know the possible range (so we know it won't cause a carry anyway).  Finally, we perform an unaligned store.  Since we did not call any functions or use any local storage, we did not need a stack frame, so we can now just exit through the link register.
</para>

<para>
The code in the <literal>convert_to_upper</literal> function will be used in all of the remaining programs in this article, but will not be included in the listing.  Just include it as-is from the previous listing.  This is certainly not the optimal way to code this function, and in the next article we will focus on pulling out every ounce of speed possible.  The current function (not even including prologue, epilogue, and loading and storing the data which takes more than 40 additional cycles) takes at least 13 processor cycles for every comparison that it does.  In the next article, we will use several techniques to reduce that to significantly less than one cycle per comparison!
</para>

</sect1>

<sect1>
<title>Communication with the PPE</title>

<sect2>
<title>Channels and the MFC</title>

<para>
SPEs have a memory that is separate from the processor's main memory, called the <emphasis>local store</emphasis>. The SPE cannot read main memory directly, but instead must import and export data between the local store and main memory using DMA commands to a unit called the <emphasis>memory flow controller</emphasis>, or MFC.  The local store address space is limitted to 32 bits, but it is usually much smaller (in the Playstation 3, for instance, it is only 18 bits).  The reason for this is so that memory accesses by SPE code can be deterministic.  Main memory can get swapped out, moved around, cached, uncached, or memory mapped.  Therefore, the amount of time required for any particular memory access is completely unknown.  By separating out the SPE memory into a local store, the SPE can have a wholly deterministic access time for any memory it accesses, and leave the MFC to move data in and out of main memory as needed.  Addresses within an SPEs local store are called <emphasis>local store addresses</emphasis>, while addresses within the main memory are called <emphasis>effective addresses</emphasis>.  This will be important as we learn how to use the memory flow controller's DMA facilities.
</para>

<para>
SPEs communicate with the outside world by using <emphasis>channels</emphasis>.  A channel is a 32-bit area which can be written to or read from (but not both -- they are unidirectional) using special instructions.  A channel can also have a depth, or <emphasis>channel count</emphasis>.  The channel count is amount of data waiting to be read (for read channels), or the amount of data which can be written (for write channels).  Channels are used for all SPE input and output.  They are used for issuing DMA commands to the memory flow controller, handling SPE events, and reading and writing messages to and from the PPE.  The next program we are going to do will utilize the MFC and the channel interface to do character conversions on data specified by the PPE.  
</para>

</sect2>

<sect2>
<title>Creating and Running SPE Tasks</title>

<para>
So far, our <literal>main</literal> function has not been using any parameters.  However, it actually receives three 64-bit parameters - the SPE task identifier in register 3, a pointer to application parameters in register 4, and a pointer to runtime environment information in register 5.  The contents of the application and environment pointers are actually user-defined, and can even be scalar values instead of pointers.  However, if they are pointers, they point to memory <emphasis>in the main storage of the application</emphasis>, not to the SPE's local store.  Therefore, they cannot be accessed directly, but must be moved in via DMA.
</para>

<para>
SPE tasks are created with the function <literal>speid_t spe_create_thread(spe_gid_t spe_gid, spe_program_handle_t *spe_program_handle, void *argp, void *envp, unsigned long mask, int flags)</literal>.  The parameters work as follows:
</para>

<variablelist>
<varlistentry>
<term>spe_gid</term>
<listitem><para>This is the SPE thread group to assign this task to.  It can simply be set to zero.</para></listitem>
<varlistentry>
<term>spe_program_handle</term>
<listitem><para>This is a pointer to a structure which holds the data about the SPE program itself.  This data is normally defined either automatically by embedding an SPU application within a PPU executable (this will be shown later), by using <literal>dlopen()</literal>/<literal>dlsym()</literal> on a library containing an SPU application, or by using <literal>spe_open_image()</literal> to directly load an SPU application.</para></listitem>
</varlistentry>
<varlistentry>
<term>argp</term>
<listitem><para>This is a pointer to application-specific data for program initialization. Set to null if it is not going to be used.</para></listitem>
</varlistentry>
<varlistentry>
<term>envp</term>
<listitem><para>This is a pointer to environment data for the program.  Set to null if it is not going to be used.</para></listitem>
</varlistentry>
<varlistentry>
<term>mask</term>
<listitem><para>This is the processor affinity mask.  Set it to -1 to assign  the process to any available SPE.  Otherwise, it contains a bitmask for each available processor.  1 means that the processor should be used, 0 means that it should not.  Most applications set this to -1.</para></listitem>
</varlistentry>
<varlistentry>
<term>flags</term>
<listitem><para>This is a set of bit flags which modify how the SPE is set up.  These are all outside the scope of this article.</para></listitem>
</varlistentry>
</variablelist>

</sect2>

<sect2>
<title>An PPE/SPE Program Using DMA</title>

<para>
As an example of DMA communication, we will write a program where the PPE takes a string, and invokes an SPE program which copies over the string, converts it to uppercase, and copies it back into main storage.  All of the data transfers will use the MFC's DMA facilities, controlled through SPE channels. 
</para>

<para>
The main SPE program receives an effective address pointer to a struct containing the size and pointer of a string in main memory.  It will then copy it into its buffer, perform the conversion, and copy it back.  Here is the SPE code (enter as <literal>convert_dma_main.s</literal>):
</para>

<example>
<title>SPU Code to Perform Uppercase Conversion for PPU Program</title>
<programlisting>
.data

.align 4
conversion_info:
conversion_length:
	.octa 0
conversion_data:
	.octa 0
.equ CONVERSION_STRUCT_SIZE, 32

.section .bss #Uninitialized Data Section
.align 4
.lcomm conversion_buffer, 16384

.text

#MFC Constants
.equ MFC_GET_CMD, 0x40
.equ MFC_PUT_CMD, 0x20

.equ LR_OFFSET, 16

##UTILITY FUNCTION TO PERFORM DMA OPS##
#Parameters -- Local Store Address, 64-bit Effective Address, Transfer Size, DMA Tag, DMA Command
.type perform_dma, @function
perform_dma:
	shlqbyi $9, $4, 4  #Get the low-order 32-bits of the address
	wrch $MFC_LSA, $3
	wrch $MFC_EAH, $4
	wrch $MFC_EAL, $9
	wrch $MFC_Size, $5
	wrch $MFC_TagID, $6
	wrch $MFC_Cmd, $7
	bi $lr

.type wait_for_dma_completion, @function
wait_for_dma_completion:
	#We receive a tag in register 3 - convert to a tag mask
	il $4, 1
	shl $4, $4, $3
	wrch $MFC_WrTagMask, $4
	#Tell the DMA that we only want it to inform us on DMA completion
	il $5, 2
	wrch $MFC_WrTagUpdate, $5
	#Wait for DMA Completion, and store the result in the return value
	rdch $3, $MFC_RdTagStat
	#Return
	bi $lr

.global main
.type main, @function
.equ MAIN_FRAME_SIZE, 80
.equ MAIN_REG_SAVE_OFFSET, 32
main:
	#Prologue
	stqd $lr, LR_OFFSET($sp)
	stqd $sp, -MAIN_FRAME_SIZE($sp)
	ai $sp, $sp, -MAIN_FRAME_SIZE

	#Save Registers
	#Save register $127 (will be used for current index)
	stqd $127, MAIN_REG_SAVE_OFFSET($sp)
	#Save register $126 (will be used for base pointer)
	stqd $126, MAIN_REG_SAVE_OFFSET+16($sp)
	#Save register $125 (will be used for final size)
	stqd $125, MAIN_REG_SAVE_OFFSET+24($sp)

	##COPY IN CONVERSION INFORMATION##
	ila $3, conversion_info         #Local Store Address
	#register 4 already has address #64-bit Effective Address
	il $5, CONVERSION_STRUCT_SIZE   #Transfer size
	il $6, 0                        #DMA Tag
	il $7, MFC_GET_CMD              #DMA Command
	brsl $lr, perform_dma

	#Wait for DMA to complete
	il $3, 0
	brsl $lr, wait_for_dma_completion

	##COPY STRING IN TO BUFFER##
	#Load buffer data pointer 
	ila $3, conversion_buffer #Local Store
	lqr $4, conversion_data   #64-bit Effective Address
	lqr $5, conversion_length #SIZE
	il $6, 0                  #DMA Tag
	il $7, MFC_GET_CMD        #DMA Command
	brsl $lr, perform_dma

	#Wait for DMA to complete
	il $3, 0
	brsl $lr, wait_for_dma_completion

	#LOOP THROUGH BUFFER
	#Load bufer size
	lqr $125, conversion_length
	#Load buffer pointer
	ila $126, conversion_buffer
	#Load buffer index
	il $127, 0
loop:
	ceq $7, $125, $127
	brnz $7, loop_end
	
	#Compute address for function parameter
	a $3, $127, $126
	#Next index
	ai $127, $127, 1

	#Run function
	brsl $lr, convert_to_upper

	#Repeat loop
	br loop

loop_end:
        #Copy data back
        ila $3, conversion_buffer   #Local Store Address
        lqr $4, conversion_data     #64-bit effective address
        lqr $5, conversion_length   #Size
        il $6, 0                    #DMA Tag
        il $7, MFC_PUT_CMD          #DMA Command
	brsl $lr, perform_dma

        #Wait for DMA to complete
	il $3, 0
	brsl $lr, wait_for_dma_completion

	#Return Value
	il $3, 0

        #Epilogue
        ai $sp, $sp, MAIN_FRAME_SIZE
        lqd $lr, LR_OFFSET($sp)
        bi $lr
</programlisting>
</example>

<para>
Now, not only do we need to compile it, we need to prepare it for embedding in a PPU application.  Assuming you still have the <literal>convert_to_upper.s</literal> from your last program in the current directory, here are the commands to compile and embed:
</para>

<programlisting>
spu-gcc convert_dma_main.s convert_to_upper.s -o spe_convert
ppu-embedspu convert_to_upper_handle spe_convert spe_convert_csf.o
</programlisting>

<para>
This produces what is called a <emphasis>CESOF Linkable</emphasis>, which allows an object file for the SPU to be embedded in a PPU application and loaded as needed.

<para>
Here is the PPU code to make use of the SPU code (enter as <literal>ppu_dma_main.c</literal>):
</para>

<example>
<title>PPU Code to Utilize SPU Application</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;libspe.h&gt;
#include &lt;errno.h&gt;

/* embedspu actually defines this in the generated object file, we only need an extern reference here */
extern spe_program_handle_t convert_to_upper_handle;

/* This is the parameter structure that our SPE code expects */
/* Note the alignment on all of the data that will be passed to the SPE is 16-bytes */
typedef struct {
	int length __attribute__((aligned(16)));
	char *data __attribute__((aligned(16)));
} conversion_structure;

int main() {
	int status = 0;
	/* Not only is this aligned to a quadword, it is also padded to a quadword. */
	char str[] __attribute__((aligned(16))) = "This is the string we want to convert to uppercase.            ";
	conversion_structure conversion_info __attribute((aligned(16)));

	/* Set the data elements in the parameter structure */
	conversion_info.length = strlen(str) + 1; /* add one for null byte */
	conversion_info.data = str;

	/* Create the thread and check for errors */
	speid_t spe_id = spe_create_thread(0, &convert_to_upper_handle, &conversion_info, NULL, -1, 0);
	if(spe_id == 0) {
		fprintf(stderr, "Unable to create SPE thread: errno=%d\n", errno);
		return 1;
	}

	/* Wait for SPE thread completion */
	spe_wait(spe_id, &status, 0);
	
	/* Print out result */
	printf("The converted string is: %s\n", conversion_info.data);

	return 0;
}
</programlisting>
</example>

<para>
To build and execute the program, enter the following commands:
</para>

<programlisting>
ppu-gcc -m64 spe_convert_csf.o ppu_dma_main.c -lspe -o dma_convert
./dma_convert
</programlisting>

<para>
That's quite a bit to swallow, but my goal is to make you competent in all of the basic aspects of SPU programming before we hit the vector processing in the next article.  So if you can hang in there, you'll be on your way to expert SPU programming in no time.  So let's go through what the code is doing.  Let's start with the PPU code, since it's a little easier.
</para>

<para>
The first interesting part of the PPU code is the inclusion of the <literal>libspe.h</literal> header file, which contains all of the function declarations for running programs on the SPE.  It then references a handle called <literal>convert_to_upper_handle</literal>.  This is only an <literal>extern</literal> reference, not the declaration itself.  This is because <literal>convert_to_upper_handle</literal> was specified in the <literal>ppu-embedspu</literal> command.  It is the handle to the embedded program.
</para>

<para>
Next, we define the structure that will be used as the parameter to our SPE program.  We need the length of the string and the pointer to the string itself.  Notice that these are all quadword aligned, so that we can copy it into our main program and use the values with a minimum of fuss.
</para>

<para>
In the main program, we declare our variables.  Note that all of the declared variables which will be copied using DMA are aligned on quadword boundaries.  That's because DMA transfers, with a few exceptions for small transfers, <emphasis>must be quadword aligned in both the source and destination addresses</emphasis>.  Next, the SPE task is created with <literal>spe_create_thread</literal>, passing in our parameter structure.  Now, we can just wait for the SPE task to complete using <literal>spe_wait</literal>, and then print out the final value.
</para>

<para>
As you may have guessed, most of the interesting parts of the program are taking place on the SPE, including all of the DMA transfers.  DMA transfers are almost always done by the SPEs rather than by the PPE because they can handle much more data and many more active operations than the PPE.  The first thing the program does is reserve space for the application's parameter data.  This is also aligned to quadword boundaries (<literal>.align 4</literal> in assembly language works the same as <literal>__attribute__((aligned(16)))</literal> in C because 2^4 = 16).  <literal>.octa</literal> reserves quadword values (the mnemonic is a holdover from 16-bit days).  We then define a constant <literal>CONVERSION_STRUCT_SIZE</literal> for the size of the whole structure.
</para>

<para>
After this, we go to the <literal>.bss</literal> section, which is like the <literal>.data</literal> section, except that the executable itself does not contain the values, it just notes how much space should be reserved for them.  This section is for uninitialized data.  <literal>.lcomm conversion_buffer, 16384</literal> reserves 16K of space, with the starting address defined in the symbol <literal>conversion_buffer</literal>.  It is defined for holding 16K because that is the maximum size of an MFC DMA transfer.  Therefore, if any string is longer than that, the PPE will have to invoke the program multiple times (a better program would simply break up the request into chunks).
</para>

<para>
The first thing that we define in our main program code are functions to handle DMA operations.  The first function is <literal>perform_dma</literal>, which, not surprisingly, performs DMA commands.  The Cell BE Handbook defines the sequence of channel operations needed to perform a DMA transfer on pages 450-456.  The first thing the function is doing is converting the 64-bit effective address in register 4 into two 32-bit components - a high- and a low-order component (remember, the channels are only 32-bits wide).  Because channels are written using a register's preferred word-sized slot, the 64-bit address already has the high-order bits in the preferred slot.  Therefore, we just shift the contents to the left by four bytes into a new register to get the low-order bits in the preferred slot.  We then write the local store address, the high-order bits of the effective address, the low-order bits of the effective address, the size of the transfer, the "tag" of the DMA command, and then the command itself to their appropriate channels using the <literla>wrch</literal> instruction.  When the command is written, the DMA request is enqueued into the MFC provided it has available slots - ours certainly does as we are not doing any concurrent DMA requests.  The "tag" is a number which can be assigned to one or many DMA commands.  All DMA commands issued with the same tag are considered a single group, and status updates and sequencing operations apply to the group as a whole.  In this application, we will only have one DMA command active at a time, so all of our operations will use 0 as the DMA tag.  The DMA command should be either <literal>MFC_GET_CMD</literal> or <literal>MFC_PUT_CMD</literal>.  There are others, but we aren't concerned with them here.  MFC commands are all done from the perspective of the SPE, whether or not it is actually the SPE issuing the command.  So <literal>MFC_GET_CMD</literal> moves data from main memory to the local store, and <literal>MFC_PUT_CMD</literal> goes the other way. 
</para>

<para>
Because DMA commands are asynchronous, it is useful to be able to wait for one to complete.  The function <literal>wait_for_dma_completion</literal> does precisely that.  It takes a tag as its only parameter, converts it to a tag mask, requests a DMA status, and then reads the status.  So how does this wait for the DMA operation to complete?  When writing to the <literal>$MFC_WrTagUpdate</literal> channel with a value of 2, it causes the <literal>$MFC_RdTagStat</literal> to not have a value until the operation is completed.  Thus, when we try to read the channel using <literal>rdch</literal>, it will block until the status is available, at which point the transfer will be complete.
</para>

<para>
The <literal>main</literal> function has the main meat of the program.  It starts by setting up a stack frame.  It then saves 3 non-volatile registers that will be used for the main control of the program.  Next, we perform a DMA transfer to copy in our parameter structure.  Remember, the first parameter to the function is the 64-bit address that we passed in from the PPE.  We then use a DMA command to fetch the full structure, and wait for the DMA to complete.  After the transfer, we use the data in that structure to copy the string itself into our buffer in the local store using another DMA transfer, and wait for it to complete.  Note that we used the <literal>ila</literal> instruction ("immediate load address") to load the address of the buffer.  The <literal>ila</literal> instruction maxes out as 18 bits, which works for the Playstation 3.  However, if a Cell processor has a larger local store size, you would load it instead with the following two instructions:
</para>
<programlisting>
ilhu $3, conversion_buffer@h #load high-order 16 bits of conversion_buffer
iohu $3, conversion_buffer@l #"or" it with the low-order 16 bits of conversion_buffer
</programlisting>
<para>
Then the target effective address, the length of the string, the DMA tag, and a <literal>MFC_GET_CMD</literal> DMA command are all passed to <literal>perform_dma</literal>.  The program then waits for the operation to complete.
</para>

<para>
At this point, all of the data is loaded in, we just need to convert it.  We then use register 127 as our loop counter and register 126 as our base pointer, and perform <literal>convert_to_upper</literal> on each value until we get to the end of the buffer.
</para>

<para>
At <literal>loop_end</literal>, all of the data is converted, and we need only to copy it back.  We use the same DMA parameters as for the last transfer, but this time it is an <literal>MFC_PUT_CMD</literal> command.  Once the DMA is completed, our function is done.  We load register 3 with the return value, and perform the function epilogue to restore the stack frame and return.
</para>

</sect2>
</sect1>

<sect1>
<title>SPE/PPE Communication Using Mailboxes</title>

<para>
One other method of SPE/PPE communication which we will briefly discuss is <emphasis>mailboxes</emphasis>.  The mailbox is a simple way to communicate data between the SPE and the PPE.  For the SPE, it is simply a set of channels (a read channel and a write channel) to write 32-bit values to the PPE.  It is similar for the PPE, except that the PPE uses MMIO.
</para>

<para>
To demonstrate the concept, we will write a very simple SPE server which waits for an integer number in the mailbox, and then writes back the square of that number.  Here is the code (enter as <literal>square_server.s</literal>:
</para>

<example>
<title>SPU Squaring Server</title>
<programlisting>
.text
.global main
.type main, @function
main:
	#Read the value from the inbox (stalls if no value until one is available)
	rdch $3, $SPU_RdInMbox 
	#Square the value
	mpy $3, $3, $3
	#Write the value back
	wrch $SPU_WrOutMbox, $3
	#Go back and do it again
	br main
</programlisting>
</example>

<para>
That's all!  This will just sit around and wait for requests and process them.  It simply quits when the parent program quits.  And, if there is no value available in the inbox, the <literal>rdch</literal> instruction simply stalls until there is one.
</para>

<para>
The PPE side isn't much harder (enter as <literal>square_client.c</literal>):
</para>

<example>
<title>PPE Squaring Client</title>
<programlisting>
#include &lt;libspe.h&gt;
#include &lt;stdio.h&gt;

extern spe_program_handle_t square_server_handle;

int main() {
	int status = 0;

	/* Create SPE thread */
	speid_t spe_id = spe_create_thread(0, &square_server_handle, NULL, NULL, -1, 0);	
	if(spe_id == 0) {
		fprintf(stderr, "Unable to create SPE thread!\n");
		return 1;
	}

	/* Request a square */
	spe_write_in_mbox(spe_id, 4);
	/* Wait for result to be available */
	while(!spe_stat_out_mbox(spe_id)) {} 
	/* Read and display result */
	printf("The square of 4 is %d\n", spe_read_out_mbox(spe_id));

	/* Do it again */
	spe_write_in_mbox(spe_id, 10);
	while(!spe_stat_out_mbox(spe_id)) {} 
	printf("The square of 10 is %d\n", spe_read_out_mbox(spe_id));

	return 0;
}
</programlisting>
</example>

<para>
Now, the mailboxes, even for the PPE, are named according to the perspective of the SPE.  So you write to the inbox and read from the outbox if you are the PPE.  Unlike the SPE, the PPE does not stall and wait for a value when it reads or writes.  Instead, the program must use <literal>spe_stat_out_mbox</literal> to wait for a value, and <literal>spe_stat_in_mbox</literal> to see if there are slots left for writing to the mailbox.  We don't use the latter as we only have one value in play at a time.
</para>

<para>
The real power of mailboxes comes when a program combines the mailbox and the DMA approach.  For example, an SPE task can be created which listens for buffer addresses on its mailbox, and then uses that address to pull in all of the data to be processed via DMA.
</para>

</sect1>

<sect1>
<title>Conclusion</title>

<para>
In this article, we tried to cover the main concepts of assembly language programming on the Playstation 3's Cell Processor under Linux.  We covered the basic architecture, the syntax of the SPU assembly language, and the primary modes of communication between the SPE and the PPE.  In the next article, we will look at how to pump every ounce of performance out of the Cell SPEs that we can.  In later articles, we will then apply this knowledge to SPE programming in C, to make our lives just a little bit easier.
</para>

</sect1>
</chapter>


<!--

http://www-128.ibm.com/developerworks/power/library/pa-celltips1/

-->





